{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1502888381074},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1502888381072},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1502888381073},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1502888381072},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1502888381075},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1502888381075},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1502888381075},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1502888381076},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1502888381075},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1502888381076},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1502888381077},{"_id":"themes/next/README.en.md","hash":"fd7a00ae9026fb4f87dd7eed9ce049d0db447140","modified":1502888381076},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1502888381078},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1502888381109},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1502888381078},{"_id":"source/_posts/backpack-problem.md","hash":"a311c5d51a9c02ffed7888c5f549c7917ee99337","modified":1502897443136},{"_id":"source/_posts/c-11-thread-notes.md","hash":"38a9e290c5e42e7453257e15808b04b788e0dfdc","modified":1502888381069},{"_id":"source/_posts/c-template-example.md","hash":"4acb4bb90a65459afa8908ae732c92658ce26b1a","modified":1502888381069},{"_id":"source/_posts/generate-random-number-with-given-distribution.md","hash":"b20d5657e4d45f26ade75958db7d74626c2bf3e6","modified":1503665736989},{"_id":"source/_posts/hash-map.md","hash":"9cb9b58c24c8fddb12b46e8d57522b0875a0dd05","modified":1502888381069},{"_id":"source/_posts/max-points-within-angle.md","hash":"7cf5dd0298079b8e0ee20cc10db4f4a5bc164fc3","modified":1503665736990},{"_id":"source/_posts/rate-checker.md","hash":"eeb0c3ca734596e9402772bbd39e9f67eb905f68","modified":1503665736991},{"_id":"themes/next/_config.yml","hash":"9997523915abc649302194f8219c441ec1f158f3","modified":1502888381077},{"_id":"source/_posts/reservoir-sample.md","hash":"5242465693786914b11d143054df68943c3928d1","modified":1502888381070},{"_id":"source/_posts/sentence-break.md","hash":"898c08bd0871bb26009a16d4004d669d9fd2d043","modified":1503666096397},{"_id":"source/_posts/thread-safe-stack.md","hash":"5e1571029edea358737582be4c5b49efc412f63a","modified":1502888381070},{"_id":"source/categories/index.md","hash":"caae220f32a69bc7fc6c24ceb4d8245378bd1408","modified":1502888381071},{"_id":"source/about/index.md","hash":"925023ca229ea132a88a9b5efba63c903bf4f217","modified":1502888381071},{"_id":"source/tags/index.md","hash":"d9d9001246bda1b158d4f3deb4b9800ae06928be","modified":1502888381071},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1502888381078},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"3178cadcec94bfad651bdf320d83946b4e0ac932","modified":1502888381074},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1502888381079},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"55091b1aab0b472d3f3e239c8d93306c751e4c1c","modified":1502888381074},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1502888381079},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1502888381073},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1502888381080},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1502888381080},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1502888381079},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1502888381080},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1502888381081},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1502888381081},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1502888381081},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1502888381082},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1502888381082},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1502888381082},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1502888381107},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1502888381107},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1502888381107},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1502888381108},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1502888381109},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1502888381110},{"_id":"themes/next/layout/_layout.swig","hash":"b88585f9e1b7071f6670b20b77b656edd087ccc9","modified":1502888381084},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1502888381108},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1502888381108},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1502888381108},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1502888381217},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1502888381218},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1502888381218},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381154},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1502888381083},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1502888381083},{"_id":"themes/next/layout/_macro/post.swig","hash":"b6b86a199f5a3692ec492123fe8cb53a8ca08169","modified":1502888381085},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1502888381085},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1502888381084},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1502888381085},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1502888381086},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f10ca698e8ea0c31ff72a6cffa832c3cd703a133","modified":1502888381086},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1502888381087},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1502888381086},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1502888381089},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1502888381088},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1502888381089},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1502888381089},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1502888381092},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1502888381087},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1502888381102},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1502888381095},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1502888381092},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1502888381102},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1502888381103},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1502888381103},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1502888381111},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1502888381111},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1502888381111},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1502888381111},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1502888381112},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1502888381112},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1502888381112},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1502888381113},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1502888381113},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1502888381104},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1502888381104},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502888381155},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1502888381154},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1502888381155},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1502888381156},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1502888381156},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1502888381157},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1502888381156},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1502888381157},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1502888381157},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502888381158},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502888381158},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1502888381158},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502888381159},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1502888381159},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1502888381159},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381093},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381094},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381142},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381141},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381143},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381152},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502888381153},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1502888381091},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1502888381088},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1502888381088},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1502888381091},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1502888381090},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1502888381092},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1502888381089},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1502888381090},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1502888381091},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1502888381093},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1502888381093},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1502888381094},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1502888381096},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1502888381096},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1502888381096},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1502888381097},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1502888381095},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1502888381097},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1502888381097},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1502888381098},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1502888381099},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1502888381097},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1502888381098},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1502888381100},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1502888381100},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1502888381098},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1502888381100},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1502888381102},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1502888381105},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1502888381101},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1502888381101},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1502888381141},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"bf009e85212749405c27d89b49f401911355ecc7","modified":1502888381142},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1502888381106},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1502888381106},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1502888381143},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1502888381141},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1502888381152},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1502888381106},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1502888381153},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"2a4e844dec690365774c2f6e8984706fee39ea63","modified":1502888381152},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1502888381153},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502888381170},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1502888381160},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1502888381161},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1502888381160},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1502888381161},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1502888381164},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1502888381160},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1502888381162},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1502888381162},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1502888381163},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1502888381163},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502888381173},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1502888381164},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1502888381185},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1502888381185},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1502888381185},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1502888381186},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1502888381186},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1502888381174},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1502888381182},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1502888381182},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1502888381183},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1502888381198},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1502888381200},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1502888381182},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1502888381201},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1502888381201},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1502888381200},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502888381203},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1502888381202},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502888381203},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502888381204},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502888381203},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502888381204},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502888381204},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502888381205},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1502888381202},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502888381205},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502888381206},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502888381205},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502888381207},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502888381206},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1502888381207},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502888381206},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1502888381208},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1502888381208},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1502888381214},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1502888381213},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1502888381209},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1502888381216},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1502888381217},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1502888381216},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1502888381199},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1502888381115},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1502888381105},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1502888381105},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1502888381114},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1502888381115},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1502888381114},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1502888381115},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1502888381121},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1502888381132},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1502888381138},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1502888381139},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1502888381140},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1502888381140},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1502888381140},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1502888381139},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1502888381145},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1502888381138},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1502888381144},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1502888381144},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1502888381145},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1502888381146},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1502888381146},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1502888381145},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1502888381148},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1502888381147},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1502888381148},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1502888381149},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1502888381150},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1502888381143},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1502888381150},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1502888381151},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1502888381148},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1502888381150},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1502888381151},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1502888381151},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1502888381167},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1502888381169},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502888381175},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502888381175},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502888381176},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1502888381163},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502888381176},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502888381177},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1502888381180},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502888381177},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1502888381169},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1502888381181},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1502888381181},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1502888381187},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1502888381187},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1502888381188},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502888381184},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1502888381184},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1502888381213},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1502888381213},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1502888381168},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502888381198},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502888381197},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1502888381215},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1502888381116},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1502888381117},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1502888381118},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1502888381116},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1502888381118},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1502888381117},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1502888381118},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1502888381120},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1502888381119},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1502888381120},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1502888381121},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1502888381120},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1502888381119},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1502888381120},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1502888381122},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1502888381121},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1502888381123},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1502888381123},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1502888381122},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1502888381124},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1502888381123},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1502888381123},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1502888381124},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1502888381125},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1502888381124},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1502888381125},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1502888381125},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1502888381126},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1502888381125},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"efc65bba7f2423439e9bca7d32ef7728c21e5c97","modified":1502888381126},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1502888381128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1502888381128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1502888381129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1502888381129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1502888381129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1502888381130},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1502888381130},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1502888381131},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1502888381130},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1502888381131},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1502888381133},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1502888381132},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1502888381133},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1502888381132},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1502888381135},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1502888381134},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1502888381133},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1502888381134},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1502888381134},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1502888381135},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1502888381137},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1502888381136},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1502888381135},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1502888381136},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1502888381137},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1502888381137},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1502888381137},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1502888381146},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1502888381149},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1502888381147},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502888381166},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502888381165},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502888381167},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502888381165},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1502888381178},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502888381178},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1502888381179},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502888381189},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502888381191},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502888381196},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1502888381179},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1502888381179},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1502888381180},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1502888381172},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1502888381212},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1502888381194}],"Category":[{"name":"algorithms","_id":"cj6rvzdr5000404tgt8igwfjt"},{"name":"programming languages","_id":"cj6rvzdrd000a04tgetldb8qm"},{"name":"data structure","_id":"cj6rvzdrg000f04tguupb9zrf"}],"Data":[],"Page":[{"title":"categories","date":"2017-08-11T22:52:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-11 18:52:55\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-08-16T12:59:41.071Z","path":"categories/index.html","layout":"page","_id":"cj6rvzdqw000104tgvwsv6zyo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-08-12T14:40:21.000Z","type":"about","_content":"I am a software engineer. I use this blog mainly to keep some learning notes and my thoughts.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-08-12 10:40:21\ntype: \"about\"\n---\nI am a software engineer. I use this blog mainly to keep some learning notes and my thoughts.\n","updated":"2017-08-16T12:59:41.071Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj6rvzdr3000304tgvhgfcshy","content":"<p>I am a software engineer. I use this blog mainly to keep some learning notes and my thoughts.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I am a software engineer. I use this blog mainly to keep some learning notes and my thoughts.</p>\n"},{"title":"tags","date":"2017-08-11T19:39:11.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-11 15:39:11\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-08-16T12:59:41.071Z","path":"tags/index.html","layout":"page","_id":"cj6rvzdr9000704tgrm5ep43x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"backpack problem","date":"2017-08-16T13:03:18.000Z","_content":"# Type 1: only size matters\nGiven items with size `A[i]`, an integer `m` denotes the size of a backpack. How full you can fill this backpack? Each item can only be used for once.\n```python\ndef back_pack_1(m,A):\n  dp = [[False]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=True\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i] and dp[i][j-A[i]]:\n        dp[i+1][j]=True\n  for i in range(m,-1,-1):\n    if dp[len(A)][i]:\n      return i\n  return 0\n# space optimized\ndef back_pack_1_1(m,A):\n  dp = [False]*(m+1)\n  tmp = [False]*(m+1)\n  dp[0] = True\n  for i in range(len(A)):\n    for j in range(m+1):\n      tmp[j]=dp[j]\n      if A[i]<=j and dp[j-A[i]]:\n        tmp[j] = True\n    dp = tmp\n    tmp = [False]*(m+1)\n  for j in range(m,-1,-1):\n    if dp[j]:\n      return j\n  return 0\n```\nFollowing the above, but item can be used for infinite times\n```python\ndef back_pack_2(m,A):\n  dp = [[False]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=True\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i] and dp[i+1][j-A[i]]:\n        dp[i+1][j]=True\n  for i in range(m,-1,-1):\n    if dp[len(A)][i]:\n      return i\n  return 0\n\ndef back_pack_2_1(m,A):\n  dp=[False]*(m+1)\n  dp[0]=True\n  for i in range(len(A)):\n    for j in range(m+1):\n      if j>=A[i] and dp[j-A[i]]:\n        dp[j]=True\n  for i in range(m,-1,-1):\n    if dp[i]:\n      return i\n  return 0\n```\n---\n# Type 2: size and value\nGiven items with size `A[i]` and value `V[i]`, and a backpack with size `m`.\nWhat's the maximum value can you put into the backpack?\n```python\ndef back_pack_3(m,A,V):\n  dp = [[0]*(m+1) for _ in range(len(A)+1)]\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i]:\n        dp[i+1][j]=max(dp[i+1][j], dp[i][j-A[i]]+V[i])\n  return dp[len(A)][m]\n\ndef back_pack_3_1(m,A,V):\n  dp = [0]*(m+1)\n  for i in range(len(A)):\n    for j in range(m,-1,-1):\n      if j >= A[i]:\n        dp[j] = max(dp[j], dp[j-A[i]]+V[i])\n  return dp[m]\n```\nFollowing the above, but infinite times\n```python\n# dp[i+1][j] = max(dp[i+1][j], dp[i+1][j-A[i]]+V[i])\ndef back_pack_4(m,A,V):\n  dp = [0]*(m+1)\n  for i in range(len(A)):\n    for j in range(m+1):\n      if j>=A[i]:\n        dp[j]=max(dp[j],dp[j-A[i]]+V[i])\n  return dp[m]\n```\n# Type 1.1: how many ways to fill\n```python\ndef back_pack_5(m, A):\n  dp=[[0]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=1\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i]:\n        dp[i+1][j]+=dp[i][j-A[i]]\n  return dp[len(A)][m]\n```\nFollow up: each item may be chosen unlimited number of times\n```python\ndef back_pack_6(m, A):\n  dp=[[0]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=1\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i]:\n        dp[i+1][j]+=dp[i+1][j-A[i]]\n  return dp[len(A)][m]\n\ndef back_pack_6_1(m,A):\n\tdp=[0]*(m+1)\n  dp[0]=1\n  for i in range(len(A)):\n    for j in range(m+1):\n      if j>=A[i]:\n        dp[j]+=dp[j-A[i]]\n  return dp[m]\n```\n# Type 1.2: slightly different\nGiven an array of positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n```python\n# Given A = [1, 2, 4], m = 4\n# # The possible combination ways are:\n# [1, 1, 1, 1]\n# [1, 1, 2]\n# [1, 2, 1]\n# [2, 1, 1]\n# [2, 2]\n# [4]\n\ndef back_pack_7(m, A):\n  dp=[0]*(m+1)\n  dp[0]=1\n  for i in range(m+1):\n    for j in range(len(A)):\n      if i>=A[j]:\n        dp[i]+=dp[i-A[j]]\n  return dp[m]\n\n```\n[ref](http://love-oriented.com/pack/Index.html)\n","source":"_posts/backpack-problem.md","raw":"---\ntitle: backpack problem\ndate: 2017-08-16 09:03:18\ntags: [python, algorithm]\ncategories: algorithms\n---\n# Type 1: only size matters\nGiven items with size `A[i]`, an integer `m` denotes the size of a backpack. How full you can fill this backpack? Each item can only be used for once.\n```python\ndef back_pack_1(m,A):\n  dp = [[False]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=True\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i] and dp[i][j-A[i]]:\n        dp[i+1][j]=True\n  for i in range(m,-1,-1):\n    if dp[len(A)][i]:\n      return i\n  return 0\n# space optimized\ndef back_pack_1_1(m,A):\n  dp = [False]*(m+1)\n  tmp = [False]*(m+1)\n  dp[0] = True\n  for i in range(len(A)):\n    for j in range(m+1):\n      tmp[j]=dp[j]\n      if A[i]<=j and dp[j-A[i]]:\n        tmp[j] = True\n    dp = tmp\n    tmp = [False]*(m+1)\n  for j in range(m,-1,-1):\n    if dp[j]:\n      return j\n  return 0\n```\nFollowing the above, but item can be used for infinite times\n```python\ndef back_pack_2(m,A):\n  dp = [[False]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=True\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i] and dp[i+1][j-A[i]]:\n        dp[i+1][j]=True\n  for i in range(m,-1,-1):\n    if dp[len(A)][i]:\n      return i\n  return 0\n\ndef back_pack_2_1(m,A):\n  dp=[False]*(m+1)\n  dp[0]=True\n  for i in range(len(A)):\n    for j in range(m+1):\n      if j>=A[i] and dp[j-A[i]]:\n        dp[j]=True\n  for i in range(m,-1,-1):\n    if dp[i]:\n      return i\n  return 0\n```\n---\n# Type 2: size and value\nGiven items with size `A[i]` and value `V[i]`, and a backpack with size `m`.\nWhat's the maximum value can you put into the backpack?\n```python\ndef back_pack_3(m,A,V):\n  dp = [[0]*(m+1) for _ in range(len(A)+1)]\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i]:\n        dp[i+1][j]=max(dp[i+1][j], dp[i][j-A[i]]+V[i])\n  return dp[len(A)][m]\n\ndef back_pack_3_1(m,A,V):\n  dp = [0]*(m+1)\n  for i in range(len(A)):\n    for j in range(m,-1,-1):\n      if j >= A[i]:\n        dp[j] = max(dp[j], dp[j-A[i]]+V[i])\n  return dp[m]\n```\nFollowing the above, but infinite times\n```python\n# dp[i+1][j] = max(dp[i+1][j], dp[i+1][j-A[i]]+V[i])\ndef back_pack_4(m,A,V):\n  dp = [0]*(m+1)\n  for i in range(len(A)):\n    for j in range(m+1):\n      if j>=A[i]:\n        dp[j]=max(dp[j],dp[j-A[i]]+V[i])\n  return dp[m]\n```\n# Type 1.1: how many ways to fill\n```python\ndef back_pack_5(m, A):\n  dp=[[0]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=1\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i]:\n        dp[i+1][j]+=dp[i][j-A[i]]\n  return dp[len(A)][m]\n```\nFollow up: each item may be chosen unlimited number of times\n```python\ndef back_pack_6(m, A):\n  dp=[[0]*(m+1) for _ in range(len(A)+1)]\n  dp[0][0]=1\n  for i in range(len(A)):\n    for j in range(m+1):\n      dp[i+1][j]=dp[i][j]\n      if j>=A[i]:\n        dp[i+1][j]+=dp[i+1][j-A[i]]\n  return dp[len(A)][m]\n\ndef back_pack_6_1(m,A):\n\tdp=[0]*(m+1)\n  dp[0]=1\n  for i in range(len(A)):\n    for j in range(m+1):\n      if j>=A[i]:\n        dp[j]+=dp[j-A[i]]\n  return dp[m]\n```\n# Type 1.2: slightly different\nGiven an array of positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n```python\n# Given A = [1, 2, 4], m = 4\n# # The possible combination ways are:\n# [1, 1, 1, 1]\n# [1, 1, 2]\n# [1, 2, 1]\n# [2, 1, 1]\n# [2, 2]\n# [4]\n\ndef back_pack_7(m, A):\n  dp=[0]*(m+1)\n  dp[0]=1\n  for i in range(m+1):\n    for j in range(len(A)):\n      if i>=A[j]:\n        dp[i]+=dp[i-A[j]]\n  return dp[m]\n\n```\n[ref](http://love-oriented.com/pack/Index.html)\n","slug":"backpack-problem","published":1,"updated":"2017-08-16T15:30:43.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdqp000004tgckdv3ci2","content":"<h1 id=\"Type-1-only-size-matters\"><a href=\"#Type-1-only-size-matters\" class=\"headerlink\" title=\"Type 1: only size matters\"></a>Type 1: only size matters</h1><p>Given items with size <code>A[i]</code>, an integer <code>m</code> denotes the size of a backpack. How full you can fill this backpack? Each item can only be used for once.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp = [[<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i] <span class=\"keyword\">and</span> dp[i][j-A[i]]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[len(A)][i]:</div><div class=\"line\">      <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\"># space optimized</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_1_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp = [<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  tmp = [<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>] = <span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      tmp[j]=dp[j]</div><div class=\"line\">      <span class=\"keyword\">if</span> A[i]&lt;=j <span class=\"keyword\">and</span> dp[j-A[i]]:</div><div class=\"line\">        tmp[j] = <span class=\"keyword\">True</span></div><div class=\"line\">    dp = tmp</div><div class=\"line\">    tmp = [<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[j]:</div><div class=\"line\">      <span class=\"keyword\">return</span> j</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>Following the above, but item can be used for infinite times<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_2</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp = [[<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i] <span class=\"keyword\">and</span> dp[i+<span class=\"number\">1</span>][j-A[i]]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[len(A)][i]:</div><div class=\"line\">      <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_2_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp=[<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i] <span class=\"keyword\">and</span> dp[j-A[i]]:</div><div class=\"line\">        dp[j]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[i]:</div><div class=\"line\">      <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"Type-2-size-and-value\"><a href=\"#Type-2-size-and-value\" class=\"headerlink\" title=\"Type 2: size and value\"></a>Type 2: size and value</h1><p>Given items with size <code>A[i]</code> and value <code>V[i]</code>, and a backpack with size <code>m</code>.<br>What’s the maximum value can you put into the backpack?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_3</span><span class=\"params\">(m,A,V)</span>:</span></div><div class=\"line\">  dp = [[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]=max(dp[i+<span class=\"number\">1</span>][j], dp[i][j-A[i]]+V[i])</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[len(A)][m]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_3_1</span><span class=\"params\">(m,A,V)</span>:</span></div><div class=\"line\">  dp = [<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j &gt;= A[i]:</div><div class=\"line\">        dp[j] = max(dp[j], dp[j-A[i]]+V[i])</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<p>Following the above, but infinite times<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># dp[i+1][j] = max(dp[i+1][j], dp[i+1][j-A[i]]+V[i])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_4</span><span class=\"params\">(m,A,V)</span>:</span></div><div class=\"line\">  dp = [<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[j]=max(dp[j],dp[j-A[i]]+V[i])</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<h1 id=\"Type-1-1-how-many-ways-to-fill\"><a href=\"#Type-1-1-how-many-ways-to-fill\" class=\"headerlink\" title=\"Type 1.1: how many ways to fill\"></a>Type 1.1: how many ways to fill</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_5</span><span class=\"params\">(m, A)</span>:</span></div><div class=\"line\">  dp=[[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]+=dp[i][j-A[i]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[len(A)][m]</div></pre></td></tr></table></figure>\n<p>Follow up: each item may be chosen unlimited number of times<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_6</span><span class=\"params\">(m, A)</span>:</span></div><div class=\"line\">  dp=[[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]+=dp[i+<span class=\"number\">1</span>][j-A[i]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[len(A)][m]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_6_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">\tdp=[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[j]+=dp[j-A[i]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<h1 id=\"Type-1-2-slightly-different\"><a href=\"#Type-1-2-slightly-different\" class=\"headerlink\" title=\"Type 1.2: slightly different\"></a>Type 1.2: slightly different</h1><p>Given an array of positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Given A = [1, 2, 4], m = 4</span></div><div class=\"line\"><span class=\"comment\"># # The possible combination ways are:</span></div><div class=\"line\"><span class=\"comment\"># [1, 1, 1, 1]</span></div><div class=\"line\"><span class=\"comment\"># [1, 1, 2]</span></div><div class=\"line\"><span class=\"comment\"># [1, 2, 1]</span></div><div class=\"line\"><span class=\"comment\"># [2, 1, 1]</span></div><div class=\"line\"><span class=\"comment\"># [2, 2]</span></div><div class=\"line\"><span class=\"comment\"># [4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_7</span><span class=\"params\">(m, A)</span>:</span></div><div class=\"line\">  dp=[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">      <span class=\"keyword\">if</span> i&gt;=A[j]:</div><div class=\"line\">        dp[i]+=dp[i-A[j]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://love-oriented.com/pack/Index.html\" target=\"_blank\" rel=\"external\">ref</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Type-1-only-size-matters\"><a href=\"#Type-1-only-size-matters\" class=\"headerlink\" title=\"Type 1: only size matters\"></a>Type 1: only size matters</h1><p>Given items with size <code>A[i]</code>, an integer <code>m</code> denotes the size of a backpack. How full you can fill this backpack? Each item can only be used for once.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp = [[<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i] <span class=\"keyword\">and</span> dp[i][j-A[i]]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[len(A)][i]:</div><div class=\"line\">      <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\"># space optimized</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_1_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp = [<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  tmp = [<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>] = <span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      tmp[j]=dp[j]</div><div class=\"line\">      <span class=\"keyword\">if</span> A[i]&lt;=j <span class=\"keyword\">and</span> dp[j-A[i]]:</div><div class=\"line\">        tmp[j] = <span class=\"keyword\">True</span></div><div class=\"line\">    dp = tmp</div><div class=\"line\">    tmp = [<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[j]:</div><div class=\"line\">      <span class=\"keyword\">return</span> j</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>Following the above, but item can be used for infinite times<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_2</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp = [[<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i] <span class=\"keyword\">and</span> dp[i+<span class=\"number\">1</span>][j-A[i]]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[len(A)][i]:</div><div class=\"line\">      <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_2_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">  dp=[<span class=\"keyword\">False</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i] <span class=\"keyword\">and</span> dp[j-A[i]]:</div><div class=\"line\">        dp[j]=<span class=\"keyword\">True</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">if</span> dp[i]:</div><div class=\"line\">      <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"Type-2-size-and-value\"><a href=\"#Type-2-size-and-value\" class=\"headerlink\" title=\"Type 2: size and value\"></a>Type 2: size and value</h1><p>Given items with size <code>A[i]</code> and value <code>V[i]</code>, and a backpack with size <code>m</code>.<br>What’s the maximum value can you put into the backpack?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_3</span><span class=\"params\">(m,A,V)</span>:</span></div><div class=\"line\">  dp = [[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]=max(dp[i+<span class=\"number\">1</span>][j], dp[i][j-A[i]]+V[i])</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[len(A)][m]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_3_1</span><span class=\"params\">(m,A,V)</span>:</span></div><div class=\"line\">  dp = [<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j &gt;= A[i]:</div><div class=\"line\">        dp[j] = max(dp[j], dp[j-A[i]]+V[i])</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<p>Following the above, but infinite times<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># dp[i+1][j] = max(dp[i+1][j], dp[i+1][j-A[i]]+V[i])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_4</span><span class=\"params\">(m,A,V)</span>:</span></div><div class=\"line\">  dp = [<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[j]=max(dp[j],dp[j-A[i]]+V[i])</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<h1 id=\"Type-1-1-how-many-ways-to-fill\"><a href=\"#Type-1-1-how-many-ways-to-fill\" class=\"headerlink\" title=\"Type 1.1: how many ways to fill\"></a>Type 1.1: how many ways to fill</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_5</span><span class=\"params\">(m, A)</span>:</span></div><div class=\"line\">  dp=[[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]+=dp[i][j-A[i]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[len(A)][m]</div></pre></td></tr></table></figure>\n<p>Follow up: each item may be chosen unlimited number of times<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_6</span><span class=\"params\">(m, A)</span>:</span></div><div class=\"line\">  dp=[[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(A)+<span class=\"number\">1</span>)]</div><div class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      dp[i+<span class=\"number\">1</span>][j]=dp[i][j]</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[i+<span class=\"number\">1</span>][j]+=dp[i+<span class=\"number\">1</span>][j-A[i]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[len(A)][m]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_6_1</span><span class=\"params\">(m,A)</span>:</span></div><div class=\"line\">\tdp=[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> j&gt;=A[i]:</div><div class=\"line\">        dp[j]+=dp[j-A[i]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<h1 id=\"Type-1-2-slightly-different\"><a href=\"#Type-1-2-slightly-different\" class=\"headerlink\" title=\"Type 1.2: slightly different\"></a>Type 1.2: slightly different</h1><p>Given an array of positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Given A = [1, 2, 4], m = 4</span></div><div class=\"line\"><span class=\"comment\"># # The possible combination ways are:</span></div><div class=\"line\"><span class=\"comment\"># [1, 1, 1, 1]</span></div><div class=\"line\"><span class=\"comment\"># [1, 1, 2]</span></div><div class=\"line\"><span class=\"comment\"># [1, 2, 1]</span></div><div class=\"line\"><span class=\"comment\"># [2, 1, 1]</span></div><div class=\"line\"><span class=\"comment\"># [2, 2]</span></div><div class=\"line\"><span class=\"comment\"># [4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back_pack_7</span><span class=\"params\">(m, A)</span>:</span></div><div class=\"line\">  dp=[<span class=\"number\">0</span>]*(m+<span class=\"number\">1</span>)</div><div class=\"line\">  dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(A)):</div><div class=\"line\">      <span class=\"keyword\">if</span> i&gt;=A[j]:</div><div class=\"line\">        dp[i]+=dp[i-A[j]]</div><div class=\"line\">  <span class=\"keyword\">return</span> dp[m]</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://love-oriented.com/pack/Index.html\" target=\"_blank\" rel=\"external\">ref</a></p>\n"},{"title":"c++11 thread notes","date":"2016-12-17T05:00:00.000Z","_content":"<!-- more -->\nNormally you run the code by:\n```\ng++ filename -std=c++11 -pthread\n```\n---\nfunction with reference parameter\n```c\n#include<thread>\n#include<iostream>\n#include<string>\n#include<functional> //ref\nusing namespace std;\nint main(){\n  string s = \"Hello!\";\n  cout << \"Main before: \" << s << endl;\n  thread t([](string& s){cout << s << endl; s = \"Ni hao!\";}, ref(s));\n  t.join();\n  cout << \"Main after: \" << s << endl;\n  return 0;\n}\n\n```\n---\nA situation of deadlock:\n``` cpp\n#include<mutex>\n#include<iostream>\n#include<thread>\n#include<string>\nusing namespace std;\nmutex mu1;\nmutex mu2;\nvoid shared_print_1(string s, int v){\n  lock_guard<mutex> g1(mu1);\n  lock_guard<mutex> g2(mu2);\n  cout << s << v << endl;\n}\nvoid shared_print_2(string s, int v){\n  lock_guard<mutex> g2(mu2);\n  lock_guard<mutex> g1(mu1);\n  cout << s << v << endl;\n}\nvoid f(int n){\n  for(auto i=0; i<n; ++i){\n    shared_print_2(\"From thread \", i);\n  }\n}\n\nint main(){\n  thread t(f, 10);\n  for(auto i = 10; i>=0; i--){\n    shared_print_1(\"From main \", i);\n  }\n  t.join();\n  return 0;\n}\n\n```\nTo prevent it, either you should make the locks in `shared_print_1` and  `shared_print_2` have the same order; or use [`std::lock`](http://en.cppreference.com/w/cpp/thread/lock)\n``` cpp\nvoid shared_print_1(string s, int v){\n  lock(mu1, mu2);\n  lock_guard<mutex> g1(mu1, adopt_lock);\n  lock_guard<mutex> g2(mu2, adopt_lock);\n  cout << s << v << endl;\n}\nvoid shared_print_2(string s, int v){\n  lock(mu2, mu1);\n  lock_guard<mutex> g2(mu2, adopt_lock);\n  lock_guard<mutex> g1(mu1, adopt_lock);\n  cout << s << v << endl;\n}\n```\nSome practices in avoiding deadlock:\n- prefer locking single mutex\n- avoid locking a mutex and then call a user provided function\n- use `std::lock` to lock more than one mutex\n- lock the mutex in the same order\n---\nAn efficient way to open file using [call_once](http://en.cppreference.com/w/cpp/thread/call_once). Note the following also uses lazy initialization as the file only needed to be open when `shared_print` is called.\n``` cpp\nclass LogFile{\n  mutex _mu; ofstream _f; once_flag _flag;\npublic:\n  LogFile(){}\n  void shared_print(string s, int v){\n    call_once(_flag, [&](){_f.open(\"filename\");});\n    lock_guard<mutex> locker(_mu);\n    _f << s << v << endl;\n  }\n}\n```\n---\n**conditional variable**: to synchronize the execution of threads</pre>\n``` cpp\n#include<iostream>\n#include<condition_variable>\n#include<mutex>\n#include<deque>\n#include<thread>\nusing namespace std;\n\ndeque<int> q;\nmutex mu;\ncondition_variable cv;\n\nvoid producer(){\n  int count = 10;\n  while(count > 0){\n    unique_lock<mutex> lock(mu);\n    q.push_front(count);\n    cout << \"produce data: \" << count << endl;\n    lock.unlock();\n    cv.notify_one();\n    count--;\n    this_thread::sleep_for(chrono::seconds(1));\n  }\n}\nvoid consumer(){\n  int data = 0;\n  while(data != 1){\n    unique_lock<mutex> lock(mu);\n    cv.wait(lock, [](){return !q.empty();}); // prevent spurious wake\n    data = q.back();\n    q.pop_back();\n    cout << \"consume data: \" << data << endl;\n    lock.unlock();\n  }\n}\nint main(){\n  thread t1(producer);\n  thread t2(consumer);\n  t1.join();\n  t2.join();\n}\n```\n","source":"_posts/c-11-thread-notes.md","raw":"---\ntitle: c++11 thread notes\ndate: 2016-12-17\ntags: [c++]\ncategories: programming languages\n---\n<!-- more -->\nNormally you run the code by:\n```\ng++ filename -std=c++11 -pthread\n```\n---\nfunction with reference parameter\n```c\n#include<thread>\n#include<iostream>\n#include<string>\n#include<functional> //ref\nusing namespace std;\nint main(){\n  string s = \"Hello!\";\n  cout << \"Main before: \" << s << endl;\n  thread t([](string& s){cout << s << endl; s = \"Ni hao!\";}, ref(s));\n  t.join();\n  cout << \"Main after: \" << s << endl;\n  return 0;\n}\n\n```\n---\nA situation of deadlock:\n``` cpp\n#include<mutex>\n#include<iostream>\n#include<thread>\n#include<string>\nusing namespace std;\nmutex mu1;\nmutex mu2;\nvoid shared_print_1(string s, int v){\n  lock_guard<mutex> g1(mu1);\n  lock_guard<mutex> g2(mu2);\n  cout << s << v << endl;\n}\nvoid shared_print_2(string s, int v){\n  lock_guard<mutex> g2(mu2);\n  lock_guard<mutex> g1(mu1);\n  cout << s << v << endl;\n}\nvoid f(int n){\n  for(auto i=0; i<n; ++i){\n    shared_print_2(\"From thread \", i);\n  }\n}\n\nint main(){\n  thread t(f, 10);\n  for(auto i = 10; i>=0; i--){\n    shared_print_1(\"From main \", i);\n  }\n  t.join();\n  return 0;\n}\n\n```\nTo prevent it, either you should make the locks in `shared_print_1` and  `shared_print_2` have the same order; or use [`std::lock`](http://en.cppreference.com/w/cpp/thread/lock)\n``` cpp\nvoid shared_print_1(string s, int v){\n  lock(mu1, mu2);\n  lock_guard<mutex> g1(mu1, adopt_lock);\n  lock_guard<mutex> g2(mu2, adopt_lock);\n  cout << s << v << endl;\n}\nvoid shared_print_2(string s, int v){\n  lock(mu2, mu1);\n  lock_guard<mutex> g2(mu2, adopt_lock);\n  lock_guard<mutex> g1(mu1, adopt_lock);\n  cout << s << v << endl;\n}\n```\nSome practices in avoiding deadlock:\n- prefer locking single mutex\n- avoid locking a mutex and then call a user provided function\n- use `std::lock` to lock more than one mutex\n- lock the mutex in the same order\n---\nAn efficient way to open file using [call_once](http://en.cppreference.com/w/cpp/thread/call_once). Note the following also uses lazy initialization as the file only needed to be open when `shared_print` is called.\n``` cpp\nclass LogFile{\n  mutex _mu; ofstream _f; once_flag _flag;\npublic:\n  LogFile(){}\n  void shared_print(string s, int v){\n    call_once(_flag, [&](){_f.open(\"filename\");});\n    lock_guard<mutex> locker(_mu);\n    _f << s << v << endl;\n  }\n}\n```\n---\n**conditional variable**: to synchronize the execution of threads</pre>\n``` cpp\n#include<iostream>\n#include<condition_variable>\n#include<mutex>\n#include<deque>\n#include<thread>\nusing namespace std;\n\ndeque<int> q;\nmutex mu;\ncondition_variable cv;\n\nvoid producer(){\n  int count = 10;\n  while(count > 0){\n    unique_lock<mutex> lock(mu);\n    q.push_front(count);\n    cout << \"produce data: \" << count << endl;\n    lock.unlock();\n    cv.notify_one();\n    count--;\n    this_thread::sleep_for(chrono::seconds(1));\n  }\n}\nvoid consumer(){\n  int data = 0;\n  while(data != 1){\n    unique_lock<mutex> lock(mu);\n    cv.wait(lock, [](){return !q.empty();}); // prevent spurious wake\n    data = q.back();\n    q.pop_back();\n    cout << \"consume data: \" << data << endl;\n    lock.unlock();\n  }\n}\nint main(){\n  thread t1(producer);\n  thread t2(consumer);\n  t1.join();\n  t2.join();\n}\n```\n","slug":"c-11-thread-notes","published":1,"updated":"2017-08-16T12:59:41.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdr0000204tgf6po3vyy","content":"<a id=\"more\"></a>\n<p>Normally you run the code by:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">g++ filename -std=c++11 -pthread</div></pre></td></tr></table></figure></p>\n<hr>\n<p>function with reference parameter<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;functional&gt; //ref</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> s = <span class=\"string\">\"Hello!\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main before: \"</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t</span><span class=\"params\">([](<span class=\"built_in\">string</span>&amp; s)</span></span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>; s = <span class=\"string\">\"Ni hao!\"</span>;&#125;, ref(s));</div><div class=\"line\">  t.join();</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main after: \"</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>A situation of deadlock:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mutex&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">mutex mu1;</div><div class=\"line\">mutex mu2;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_1</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_2</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i=<span class=\"number\">0</span>; i&lt;n; ++i)&#123;</div><div class=\"line\">    shared_print_2(<span class=\"string\">\"From thread \"</span>, i);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t</span><span class=\"params\">(f, <span class=\"number\">10</span>)</span></span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = <span class=\"number\">10</span>; i&gt;=<span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">    shared_print_1(<span class=\"string\">\"From main \"</span>, i);</div><div class=\"line\">  &#125;</div><div class=\"line\">  t.join();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>To prevent it, either you should make the locks in <code>shared_print_1</code> and  <code>shared_print_2</code> have the same order; or use <a href=\"http://en.cppreference.com/w/cpp/thread/lock\" target=\"_blank\" rel=\"external\"><code>std::lock</code></a><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_1</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock(mu1, mu2);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1, adopt_lock);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2, adopt_lock);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_2</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock(mu2, mu1);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2, adopt_lock);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1, adopt_lock);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Some practices in avoiding deadlock:</p>\n<ul>\n<li>prefer locking single mutex</li>\n<li>avoid locking a mutex and then call a user provided function</li>\n<li>use <code>std::lock</code> to lock more than one mutex</li>\n<li>lock the mutex in the same order</li>\n</ul>\n<hr>\n<p>An efficient way to open file using <a href=\"http://en.cppreference.com/w/cpp/thread/call_once\" target=\"_blank\" rel=\"external\">call_once</a>. Note the following also uses lazy initialization as the file only needed to be open when <code>shared_print</code> is called.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFile</span>&#123;</span></div><div class=\"line\">  mutex _mu; ofstream _f; once_flag _flag;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  LogFile()&#123;&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">    call_once(_flag, [&amp;]()&#123;_f.open(<span class=\"string\">\"filename\"</span>);&#125;);</div><div class=\"line\">    lock_guard&lt;mutex&gt; locker(_mu);</div><div class=\"line\">    _f &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>conditional variable</strong>: to synchronize the execution of threads<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;condition_variable&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mutex&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;deque&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">mutex mu;</div><div class=\"line\">condition_variable cv;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">producer</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(count &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    unique_lock&lt;mutex&gt; lock(mu);</div><div class=\"line\">    q.push_front(count);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"produce data: \"</span> &lt;&lt; count &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    lock.unlock();</div><div class=\"line\">    cv.notify_one();</div><div class=\"line\">    count--;</div><div class=\"line\">    this_thread::sleep_for(chrono::seconds(<span class=\"number\">1</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">consumer</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(data != <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    unique_lock&lt;mutex&gt; lock(mu);</div><div class=\"line\">    cv.wait(lock, []()&#123;<span class=\"keyword\">return</span> !q.empty();&#125;); <span class=\"comment\">// prevent spurious wake</span></div><div class=\"line\">    data = q.back();</div><div class=\"line\">    q.pop_back();</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"consume data: \"</span> &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    lock.unlock();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(producer)</span></span>;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t2</span><span class=\"params\">(consumer)</span></span>;</div><div class=\"line\">  t1.join();</div><div class=\"line\">  t2.join();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Normally you run the code by:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">g++ filename -std=c++11 -pthread</div></pre></td></tr></table></figure></p>\n<hr>\n<p>function with reference parameter<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;functional&gt; //ref</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">string</span> s = <span class=\"string\">\"Hello!\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main before: \"</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t</span><span class=\"params\">([](<span class=\"built_in\">string</span>&amp; s)</span></span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>; s = <span class=\"string\">\"Ni hao!\"</span>;&#125;, ref(s));</div><div class=\"line\">  t.join();</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main after: \"</span> &lt;&lt; s &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>A situation of deadlock:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mutex&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\">mutex mu1;</div><div class=\"line\">mutex mu2;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_1</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_2</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i=<span class=\"number\">0</span>; i&lt;n; ++i)&#123;</div><div class=\"line\">    shared_print_2(<span class=\"string\">\"From thread \"</span>, i);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t</span><span class=\"params\">(f, <span class=\"number\">10</span>)</span></span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = <span class=\"number\">10</span>; i&gt;=<span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">    shared_print_1(<span class=\"string\">\"From main \"</span>, i);</div><div class=\"line\">  &#125;</div><div class=\"line\">  t.join();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>To prevent it, either you should make the locks in <code>shared_print_1</code> and  <code>shared_print_2</code> have the same order; or use <a href=\"http://en.cppreference.com/w/cpp/thread/lock\" target=\"_blank\" rel=\"external\"><code>std::lock</code></a><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_1</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock(mu1, mu2);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1, adopt_lock);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2, adopt_lock);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print_2</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">  lock(mu2, mu1);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g2(mu2, adopt_lock);</div><div class=\"line\">  lock_guard&lt;mutex&gt; g1(mu1, adopt_lock);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Some practices in avoiding deadlock:</p>\n<ul>\n<li>prefer locking single mutex</li>\n<li>avoid locking a mutex and then call a user provided function</li>\n<li>use <code>std::lock</code> to lock more than one mutex</li>\n<li>lock the mutex in the same order</li>\n</ul>\n<hr>\n<p>An efficient way to open file using <a href=\"http://en.cppreference.com/w/cpp/thread/call_once\" target=\"_blank\" rel=\"external\">call_once</a>. Note the following also uses lazy initialization as the file only needed to be open when <code>shared_print</code> is called.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFile</span>&#123;</span></div><div class=\"line\">  mutex _mu; ofstream _f; once_flag _flag;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  LogFile()&#123;&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">    call_once(_flag, [&amp;]()&#123;_f.open(<span class=\"string\">\"filename\"</span>);&#125;);</div><div class=\"line\">    lock_guard&lt;mutex&gt; locker(_mu);</div><div class=\"line\">    _f &lt;&lt; s &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>conditional variable</strong>: to synchronize the execution of threads<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;condition_variable&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;mutex&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;deque&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;thread&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">mutex mu;</div><div class=\"line\">condition_variable cv;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">producer</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(count &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">    unique_lock&lt;mutex&gt; lock(mu);</div><div class=\"line\">    q.push_front(count);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"produce data: \"</span> &lt;&lt; count &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    lock.unlock();</div><div class=\"line\">    cv.notify_one();</div><div class=\"line\">    count--;</div><div class=\"line\">    this_thread::sleep_for(chrono::seconds(<span class=\"number\">1</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">consumer</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(data != <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    unique_lock&lt;mutex&gt; lock(mu);</div><div class=\"line\">    cv.wait(lock, []()&#123;<span class=\"keyword\">return</span> !q.empty();&#125;); <span class=\"comment\">// prevent spurious wake</span></div><div class=\"line\">    data = q.back();</div><div class=\"line\">    q.pop_back();</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"consume data: \"</span> &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    lock.unlock();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(producer)</span></span>;</div><div class=\"line\">  <span class=\"function\">thread <span class=\"title\">t2</span><span class=\"params\">(consumer)</span></span>;</div><div class=\"line\">  t1.join();</div><div class=\"line\">  t2.join();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"hash map","date":"2016-12-31T05:00:00.000Z","_content":"<!-- more -->\nA simple implementation using separate chaining, [ref](https://medium.com/@aozturk/simple-hash-map-hash-table-implementation-in-c-931965904250#.m7j76vce2).\n```cpp\n#include<stdexcept>\n#include<iostream>\n#include<string>\nusing space std;\n\ntemplate<typename K, typename V>\nstruct node{\n  K key; V value; node * next;\n  node(const K& k, const V& v):key(k),value(v),next(NULL){}\n};\nunsigned long TABLE_SIZE = 101;\ntemplate<typename K, typename V, typename F>\nclass sc_hash_map{\npublic:\n  sc_hash_map(unsigned long sz = TABLE_SIZE):_size(sz){\n    _table = new node<K, V>*[_size];\n  }\n  ~sc_hash_map(){\n    for(int i=0; i<_size; ++i){\n      auto entry = _table[i];\n      while(entry){\n        auto prev = entry;\n        entry = entry->next;\n        delete prev;\n      }\n      _table[i] = NULL;\n    }\n    delete[] table;\n  }\n  const V& get(const K& k){\n    auto index = _hash_func(k);\n    auto entry = _table[index];\n    while(entry){\n      if(entry->key == k){\n        return entry->value;\n      }\n      entry = entry->next;\n    }\n    raise out_of_range(\"invalid key\");\n  }\n  void insert(const K& k, const V& v){\n    auto index = _hash_func(k);\n    auto entry = _table[index];\n    while(entry && entry->key != k){\n      auto prev = entry;\n      entry = entry->next;\n    }\n    if(!entry){\n      entry = new node<K,V>(k,v);\n      auto tmp = _table[index];\n      _table[index] = entry;\n      entry->next = tmp;\n    } else {\n      entry->value = v;\n    }\n  }\n  void remove(const K& k){\n    auto index = _hash_func(k);\n    auto entry = _table[index];\n    node<K,V>* prev = NULL;\n    while(entry && entry->key != k){\n      prev = entry;\n      entry = entry->next;\n    }\n    if(!entry){\n      return;\n    } else {\n      if(_table[index] == entry){\n        _table[index] = entry->next;\n      } else {\n        prev->next = entry->next;\n      }\n      delete entry;\n    }\n  }\nprivate:\n  node<K, V> ** _table;\n  F _hash_func;\n  unsigned long _size;\n}\nstruct my_hash_func{\n  unsigned long operator()(const int& k){\n    return k%TABLE_SIZE;\n  }\n}\nint main(){\n  sc_hash_table<int, string, my_hash_func> mp;\n  mp.insert(1, \"hello\");\n  mp.insert(2, \"world\");\n  mp.insert(102, \"nihao\");\n  cout << mp.get(1) << endl;\n  return 0;\n}\n```\n---\nopen addressing\n```cpp\n#include<iostream>\n#include<string>\nusing namespace std;\n\nenum STATE {EMPTY, OCCUPIED, DELETED};\nint TABLE_SIZE = 101;\ntemplate<typename K, typename V, typename F>\nclass lp_hash_map{\npublic:\n  lp_hash_map(unsigned long sz = TABLE_SIZE):_size(sz){\n    _table = new pair<K, V>[_size];\n    _state = new STATE[_size];\n  }\n  ~lp_hash_map(){\n    delete[] _table;\n    delete[] _state;\n  }\n  int find_index(const K& k){\n    auto index = _hash_func(k);\n    auto start = index;\n    while(_state[index] != EMPTY){\n      if(_state[index] == OCCUPIED && _table[index].first == k)\n        return index;\n      index = (index + 1)%_size;\n      if(index == start) break;\n    }\n    return -1;\n  }\n  V& get(const K& k){\n    auto index = find_index(k);\n    if(index < 0){\n      throw out_of_range(\"invalid key!\");\n    } else {\n      return _table[index].second;\n    }\n  }\n  void insert(const K& k, const V& v){\n    auto index = _hash_func(k);\n    auto start = index;\n    while(_state[index] == OCCUPIED && _table[index].first != k){\n      index = (index + 1)%_size;\n      if(index == start) throw out_of_range(\"full!\");\n    }\n    _table[index] = make_pair(k, v);\n    _state[index] = OCCUPIED;\n  }\n  void remove(const K& k){\n    auto index = find_index(k);\n    if(index < 0) return;\n    _state[index] = DELETED;\n  }\nprivate:\n  F _hash_func;\n  pair<K, V>* _table;\n  STATE* _state;\n  unsigned long _size;\n};\nstruct MyKeyHash {\n  unsigned long operator()(const int& k){\n    return k % TABLE_SIZE;\n  }\n};\nint main(){\n  lp_hash_map<int, string, MyKeyHash> mp;\n  mp.insert(1,\"hello\");\n  cout << mp.get(1) << endl;\n  mp.insert(2,\"world\");\n  mp.insert(1,\"nihao\");\n  cout << mp.get(1) << endl;\n  mp.remove(1);\n  cout << mp.get(1) << endl;\n  return 0;\n}\n```\n","source":"_posts/hash-map.md","raw":"---\ntitle: hash map\ndate: 2016-12-31\ntags: [c++]\ncategories: data structure\n---\n<!-- more -->\nA simple implementation using separate chaining, [ref](https://medium.com/@aozturk/simple-hash-map-hash-table-implementation-in-c-931965904250#.m7j76vce2).\n```cpp\n#include<stdexcept>\n#include<iostream>\n#include<string>\nusing space std;\n\ntemplate<typename K, typename V>\nstruct node{\n  K key; V value; node * next;\n  node(const K& k, const V& v):key(k),value(v),next(NULL){}\n};\nunsigned long TABLE_SIZE = 101;\ntemplate<typename K, typename V, typename F>\nclass sc_hash_map{\npublic:\n  sc_hash_map(unsigned long sz = TABLE_SIZE):_size(sz){\n    _table = new node<K, V>*[_size];\n  }\n  ~sc_hash_map(){\n    for(int i=0; i<_size; ++i){\n      auto entry = _table[i];\n      while(entry){\n        auto prev = entry;\n        entry = entry->next;\n        delete prev;\n      }\n      _table[i] = NULL;\n    }\n    delete[] table;\n  }\n  const V& get(const K& k){\n    auto index = _hash_func(k);\n    auto entry = _table[index];\n    while(entry){\n      if(entry->key == k){\n        return entry->value;\n      }\n      entry = entry->next;\n    }\n    raise out_of_range(\"invalid key\");\n  }\n  void insert(const K& k, const V& v){\n    auto index = _hash_func(k);\n    auto entry = _table[index];\n    while(entry && entry->key != k){\n      auto prev = entry;\n      entry = entry->next;\n    }\n    if(!entry){\n      entry = new node<K,V>(k,v);\n      auto tmp = _table[index];\n      _table[index] = entry;\n      entry->next = tmp;\n    } else {\n      entry->value = v;\n    }\n  }\n  void remove(const K& k){\n    auto index = _hash_func(k);\n    auto entry = _table[index];\n    node<K,V>* prev = NULL;\n    while(entry && entry->key != k){\n      prev = entry;\n      entry = entry->next;\n    }\n    if(!entry){\n      return;\n    } else {\n      if(_table[index] == entry){\n        _table[index] = entry->next;\n      } else {\n        prev->next = entry->next;\n      }\n      delete entry;\n    }\n  }\nprivate:\n  node<K, V> ** _table;\n  F _hash_func;\n  unsigned long _size;\n}\nstruct my_hash_func{\n  unsigned long operator()(const int& k){\n    return k%TABLE_SIZE;\n  }\n}\nint main(){\n  sc_hash_table<int, string, my_hash_func> mp;\n  mp.insert(1, \"hello\");\n  mp.insert(2, \"world\");\n  mp.insert(102, \"nihao\");\n  cout << mp.get(1) << endl;\n  return 0;\n}\n```\n---\nopen addressing\n```cpp\n#include<iostream>\n#include<string>\nusing namespace std;\n\nenum STATE {EMPTY, OCCUPIED, DELETED};\nint TABLE_SIZE = 101;\ntemplate<typename K, typename V, typename F>\nclass lp_hash_map{\npublic:\n  lp_hash_map(unsigned long sz = TABLE_SIZE):_size(sz){\n    _table = new pair<K, V>[_size];\n    _state = new STATE[_size];\n  }\n  ~lp_hash_map(){\n    delete[] _table;\n    delete[] _state;\n  }\n  int find_index(const K& k){\n    auto index = _hash_func(k);\n    auto start = index;\n    while(_state[index] != EMPTY){\n      if(_state[index] == OCCUPIED && _table[index].first == k)\n        return index;\n      index = (index + 1)%_size;\n      if(index == start) break;\n    }\n    return -1;\n  }\n  V& get(const K& k){\n    auto index = find_index(k);\n    if(index < 0){\n      throw out_of_range(\"invalid key!\");\n    } else {\n      return _table[index].second;\n    }\n  }\n  void insert(const K& k, const V& v){\n    auto index = _hash_func(k);\n    auto start = index;\n    while(_state[index] == OCCUPIED && _table[index].first != k){\n      index = (index + 1)%_size;\n      if(index == start) throw out_of_range(\"full!\");\n    }\n    _table[index] = make_pair(k, v);\n    _state[index] = OCCUPIED;\n  }\n  void remove(const K& k){\n    auto index = find_index(k);\n    if(index < 0) return;\n    _state[index] = DELETED;\n  }\nprivate:\n  F _hash_func;\n  pair<K, V>* _table;\n  STATE* _state;\n  unsigned long _size;\n};\nstruct MyKeyHash {\n  unsigned long operator()(const int& k){\n    return k % TABLE_SIZE;\n  }\n};\nint main(){\n  lp_hash_map<int, string, MyKeyHash> mp;\n  mp.insert(1,\"hello\");\n  cout << mp.get(1) << endl;\n  mp.insert(2,\"world\");\n  mp.insert(1,\"nihao\");\n  cout << mp.get(1) << endl;\n  mp.remove(1);\n  cout << mp.get(1) << endl;\n  return 0;\n}\n```\n","slug":"hash-map","published":1,"updated":"2017-08-16T12:59:41.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdr8000604tgdoittmd6","content":"<a id=\"more\"></a>\n<p>A simple implementation using separate chaining, <a href=\"https://medium.com/@aozturk/simple-hash-map-hash-table-implementation-in-c-931965904250#.m7j76vce2\" target=\"_blank\" rel=\"external\">ref</a>.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdexcept&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> space <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> K, <span class=\"keyword\">typename</span> V&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></div><div class=\"line\">  K key; V value; node * next;</div><div class=\"line\">  node(<span class=\"keyword\">const</span> K&amp; k, <span class=\"keyword\">const</span> V&amp; v):key(k),value(v),next(<span class=\"literal\">NULL</span>)&#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> TABLE_SIZE = <span class=\"number\">101</span>;</div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> K, <span class=\"keyword\">typename</span> V, <span class=\"keyword\">typename</span> F&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sc_hash_map</span>&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  sc_hash_map(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sz = TABLE_SIZE):_size(sz)&#123;</div><div class=\"line\">    _table = <span class=\"keyword\">new</span> node&lt;K, V&gt;*[_size];</div><div class=\"line\">  &#125;</div><div class=\"line\">  ~sc_hash_map()&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;_size; ++i)&#123;</div><div class=\"line\">      <span class=\"keyword\">auto</span> entry = _table[i];</div><div class=\"line\">      <span class=\"keyword\">while</span>(entry)&#123;</div><div class=\"line\">        <span class=\"keyword\">auto</span> prev = entry;</div><div class=\"line\">        entry = entry-&gt;next;</div><div class=\"line\">        <span class=\"keyword\">delete</span> prev;</div><div class=\"line\">      &#125;</div><div class=\"line\">      _table[i] = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">delete</span>[] table;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> V&amp; <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> entry = _table[index];</div><div class=\"line\">    <span class=\"keyword\">while</span>(entry)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(entry-&gt;key == k)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entry-&gt;value;</div><div class=\"line\">      &#125;</div><div class=\"line\">      entry = entry-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\">raise <span class=\"title\">out_of_range</span><span class=\"params\">(<span class=\"string\">\"invalid key\"</span>)</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k, <span class=\"keyword\">const</span> V&amp; v)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> entry = _table[index];</div><div class=\"line\">    <span class=\"keyword\">while</span>(entry &amp;&amp; entry-&gt;key != k)&#123;</div><div class=\"line\">      <span class=\"keyword\">auto</span> prev = entry;</div><div class=\"line\">      entry = entry-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!entry)&#123;</div><div class=\"line\">      entry = <span class=\"keyword\">new</span> node&lt;K,V&gt;(k,v);</div><div class=\"line\">      <span class=\"keyword\">auto</span> tmp = _table[index];</div><div class=\"line\">      _table[index] = entry;</div><div class=\"line\">      entry-&gt;next = tmp;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      entry-&gt;value = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> entry = _table[index];</div><div class=\"line\">    node&lt;K,V&gt;* prev = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(entry &amp;&amp; entry-&gt;key != k)&#123;</div><div class=\"line\">      prev = entry;</div><div class=\"line\">      entry = entry-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!entry)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(_table[index] == entry)&#123;</div><div class=\"line\">        _table[index] = entry-&gt;next;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        prev-&gt;next = entry-&gt;next;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">delete</span> entry;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">  node&lt;K, V&gt; ** _table;</div><div class=\"line\">  F _hash_func;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> _size;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_hash_func</span>&#123;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> k%TABLE_SIZE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  sc_hash_table&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>, my_hash_func&gt; mp;</div><div class=\"line\">  mp.insert(<span class=\"number\">1</span>, <span class=\"string\">\"hello\"</span>);</div><div class=\"line\">  mp.insert(<span class=\"number\">2</span>, <span class=\"string\">\"world\"</span>);</div><div class=\"line\">  mp.insert(<span class=\"number\">102</span>, <span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>open addressing<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">enum</span> STATE &#123;EMPTY, OCCUPIED, DELETED&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> TABLE_SIZE = <span class=\"number\">101</span>;</div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> K, <span class=\"keyword\">typename</span> V, <span class=\"keyword\">typename</span> F&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">lp_hash_map</span>&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  lp_hash_map(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sz = TABLE_SIZE):_size(sz)&#123;</div><div class=\"line\">    _table = <span class=\"keyword\">new</span> pair&lt;K, V&gt;[_size];</div><div class=\"line\">    _state = <span class=\"keyword\">new</span> STATE[_size];</div><div class=\"line\">  &#125;</div><div class=\"line\">  ~lp_hash_map()&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span>[] _table;</div><div class=\"line\">    <span class=\"keyword\">delete</span>[] _state;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_index</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> start = index;</div><div class=\"line\">    <span class=\"keyword\">while</span>(_state[index] != EMPTY)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(_state[index] == OCCUPIED &amp;&amp; _table[index].first == k)</div><div class=\"line\">        <span class=\"keyword\">return</span> index;</div><div class=\"line\">      index = (index + <span class=\"number\">1</span>)%_size;</div><div class=\"line\">      <span class=\"keyword\">if</span>(index == start) <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\">V&amp; <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = find_index(k);</div><div class=\"line\">    <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> out_of_range(<span class=\"string\">\"invalid key!\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _table[index].second;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k, <span class=\"keyword\">const</span> V&amp; v)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> start = index;</div><div class=\"line\">    <span class=\"keyword\">while</span>(_state[index] == OCCUPIED &amp;&amp; _table[index].first != k)&#123;</div><div class=\"line\">      index = (index + <span class=\"number\">1</span>)%_size;</div><div class=\"line\">      <span class=\"keyword\">if</span>(index == start) <span class=\"keyword\">throw</span> out_of_range(<span class=\"string\">\"full!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    _table[index] = make_pair(k, v);</div><div class=\"line\">    _state[index] = OCCUPIED;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = find_index(k);</div><div class=\"line\">    <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    _state[index] = DELETED;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">  F _hash_func;</div><div class=\"line\">  pair&lt;K, V&gt;* _table;</div><div class=\"line\">  STATE* _state;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> _size;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyKeyHash</span> &#123;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> k % TABLE_SIZE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  lp_hash_map&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>, MyKeyHash&gt; mp;</div><div class=\"line\">  mp.insert(<span class=\"number\">1</span>,<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  mp.insert(<span class=\"number\">2</span>,<span class=\"string\">\"world\"</span>);</div><div class=\"line\">  mp.insert(<span class=\"number\">1</span>,<span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  mp.remove(<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>A simple implementation using separate chaining, <a href=\"https://medium.com/@aozturk/simple-hash-map-hash-table-implementation-in-c-931965904250#.m7j76vce2\" target=\"_blank\" rel=\"external\">ref</a>.<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdexcept&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> space <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> K, <span class=\"keyword\">typename</span> V&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></div><div class=\"line\">  K key; V value; node * next;</div><div class=\"line\">  node(<span class=\"keyword\">const</span> K&amp; k, <span class=\"keyword\">const</span> V&amp; v):key(k),value(v),next(<span class=\"literal\">NULL</span>)&#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> TABLE_SIZE = <span class=\"number\">101</span>;</div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> K, <span class=\"keyword\">typename</span> V, <span class=\"keyword\">typename</span> F&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sc_hash_map</span>&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  sc_hash_map(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sz = TABLE_SIZE):_size(sz)&#123;</div><div class=\"line\">    _table = <span class=\"keyword\">new</span> node&lt;K, V&gt;*[_size];</div><div class=\"line\">  &#125;</div><div class=\"line\">  ~sc_hash_map()&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;_size; ++i)&#123;</div><div class=\"line\">      <span class=\"keyword\">auto</span> entry = _table[i];</div><div class=\"line\">      <span class=\"keyword\">while</span>(entry)&#123;</div><div class=\"line\">        <span class=\"keyword\">auto</span> prev = entry;</div><div class=\"line\">        entry = entry-&gt;next;</div><div class=\"line\">        <span class=\"keyword\">delete</span> prev;</div><div class=\"line\">      &#125;</div><div class=\"line\">      _table[i] = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">delete</span>[] table;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> V&amp; <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> entry = _table[index];</div><div class=\"line\">    <span class=\"keyword\">while</span>(entry)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(entry-&gt;key == k)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entry-&gt;value;</div><div class=\"line\">      &#125;</div><div class=\"line\">      entry = entry-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\">raise <span class=\"title\">out_of_range</span><span class=\"params\">(<span class=\"string\">\"invalid key\"</span>)</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k, <span class=\"keyword\">const</span> V&amp; v)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> entry = _table[index];</div><div class=\"line\">    <span class=\"keyword\">while</span>(entry &amp;&amp; entry-&gt;key != k)&#123;</div><div class=\"line\">      <span class=\"keyword\">auto</span> prev = entry;</div><div class=\"line\">      entry = entry-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!entry)&#123;</div><div class=\"line\">      entry = <span class=\"keyword\">new</span> node&lt;K,V&gt;(k,v);</div><div class=\"line\">      <span class=\"keyword\">auto</span> tmp = _table[index];</div><div class=\"line\">      _table[index] = entry;</div><div class=\"line\">      entry-&gt;next = tmp;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      entry-&gt;value = v;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> entry = _table[index];</div><div class=\"line\">    node&lt;K,V&gt;* prev = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(entry &amp;&amp; entry-&gt;key != k)&#123;</div><div class=\"line\">      prev = entry;</div><div class=\"line\">      entry = entry-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!entry)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(_table[index] == entry)&#123;</div><div class=\"line\">        _table[index] = entry-&gt;next;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        prev-&gt;next = entry-&gt;next;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">delete</span> entry;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">  node&lt;K, V&gt; ** _table;</div><div class=\"line\">  F _hash_func;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> _size;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_hash_func</span>&#123;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> k%TABLE_SIZE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  sc_hash_table&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>, my_hash_func&gt; mp;</div><div class=\"line\">  mp.insert(<span class=\"number\">1</span>, <span class=\"string\">\"hello\"</span>);</div><div class=\"line\">  mp.insert(<span class=\"number\">2</span>, <span class=\"string\">\"world\"</span>);</div><div class=\"line\">  mp.insert(<span class=\"number\">102</span>, <span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>open addressing<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">enum</span> STATE &#123;EMPTY, OCCUPIED, DELETED&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> TABLE_SIZE = <span class=\"number\">101</span>;</div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> K, <span class=\"keyword\">typename</span> V, <span class=\"keyword\">typename</span> F&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">lp_hash_map</span>&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  lp_hash_map(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sz = TABLE_SIZE):_size(sz)&#123;</div><div class=\"line\">    _table = <span class=\"keyword\">new</span> pair&lt;K, V&gt;[_size];</div><div class=\"line\">    _state = <span class=\"keyword\">new</span> STATE[_size];</div><div class=\"line\">  &#125;</div><div class=\"line\">  ~lp_hash_map()&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span>[] _table;</div><div class=\"line\">    <span class=\"keyword\">delete</span>[] _state;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_index</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> start = index;</div><div class=\"line\">    <span class=\"keyword\">while</span>(_state[index] != EMPTY)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(_state[index] == OCCUPIED &amp;&amp; _table[index].first == k)</div><div class=\"line\">        <span class=\"keyword\">return</span> index;</div><div class=\"line\">      index = (index + <span class=\"number\">1</span>)%_size;</div><div class=\"line\">      <span class=\"keyword\">if</span>(index == start) <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\">V&amp; <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = find_index(k);</div><div class=\"line\">    <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> out_of_range(<span class=\"string\">\"invalid key!\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _table[index].second;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k, <span class=\"keyword\">const</span> V&amp; v)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = _hash_func(k);</div><div class=\"line\">    <span class=\"keyword\">auto</span> start = index;</div><div class=\"line\">    <span class=\"keyword\">while</span>(_state[index] == OCCUPIED &amp;&amp; _table[index].first != k)&#123;</div><div class=\"line\">      index = (index + <span class=\"number\">1</span>)%_size;</div><div class=\"line\">      <span class=\"keyword\">if</span>(index == start) <span class=\"keyword\">throw</span> out_of_range(<span class=\"string\">\"full!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    _table[index] = make_pair(k, v);</div><div class=\"line\">    _state[index] = OCCUPIED;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">const</span> K&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">auto</span> index = find_index(k);</div><div class=\"line\">    <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    _state[index] = DELETED;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">  F _hash_func;</div><div class=\"line\">  pair&lt;K, V&gt;* _table;</div><div class=\"line\">  STATE* _state;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> _size;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyKeyHash</span> &#123;</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> k % TABLE_SIZE;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  lp_hash_map&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>, MyKeyHash&gt; mp;</div><div class=\"line\">  mp.insert(<span class=\"number\">1</span>,<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  mp.insert(<span class=\"number\">2</span>,<span class=\"string\">\"world\"</span>);</div><div class=\"line\">  mp.insert(<span class=\"number\">1</span>,<span class=\"string\">\"nihao\"</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  mp.remove(<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; mp.get(<span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"c++ template example","date":"2016-12-23T05:00:00.000Z","_content":"<!-- more -->\n```cpp\n#include<iostream>\n#include<string>\nusing namespace std;\n\ntemplate<typename T>\nstruct node{\n  T val;\n  node* next;\n  node(T v):val(v),next(NULL){}\n};\n\ntemplate<typename T>\nvoid print_list(node<T>* head){\n  while(head){\n    cout << head->val << \" \";\n    head = head->next;\n  }\n  cout << endl;\n}\n\ntemplate<typename T>\nnode<T>* reverse(node<T>* head){\n  if(!head || !(head->next)) return head;\n  auto tail = head->next;\n  head->next = NULL;\n  auto new_head = reverse(tail);\n  tail->next = head;\n  return new_head;\n}\n\n// template<typename T>\n// node<T>* reverse(node<T>* head){\n//   node<T>* new_head = NULL;\n//   node<T>* next = NULL;\n//   while(head){\n//     next = head->next;\n//     head->next = new_head;\n//     new_head = head;\n//     head = next;\n//   }\n//   return new_head;\n// }\n\nint main(){\n  auto h1 = new node<string>(\"A\");\n  h1->next = new node<string>(\"B\");\n  h1->next->next = new node<string>(\"C\");\n  print_list<string>(h1);\n  auto new_head = reverse<string>(h1);\n  print_list(new_head);\n  auto h2 = new node<int>(1);\n  h2->next = new node<int>(2);\n  h2->next->next = new node<int>(3);\n  print_list<int>(h2);\n  auto new_head2 = reverse<int>(h2);\n  print_list<int>(new_head2);\n  return 0;\n}\n```\n","source":"_posts/c-template-example.md","raw":"---\ntitle: c++ template example\ndate: 2016-12-23\ntags: [c++]\ncategories: programming languages\n---\n<!-- more -->\n```cpp\n#include<iostream>\n#include<string>\nusing namespace std;\n\ntemplate<typename T>\nstruct node{\n  T val;\n  node* next;\n  node(T v):val(v),next(NULL){}\n};\n\ntemplate<typename T>\nvoid print_list(node<T>* head){\n  while(head){\n    cout << head->val << \" \";\n    head = head->next;\n  }\n  cout << endl;\n}\n\ntemplate<typename T>\nnode<T>* reverse(node<T>* head){\n  if(!head || !(head->next)) return head;\n  auto tail = head->next;\n  head->next = NULL;\n  auto new_head = reverse(tail);\n  tail->next = head;\n  return new_head;\n}\n\n// template<typename T>\n// node<T>* reverse(node<T>* head){\n//   node<T>* new_head = NULL;\n//   node<T>* next = NULL;\n//   while(head){\n//     next = head->next;\n//     head->next = new_head;\n//     new_head = head;\n//     head = next;\n//   }\n//   return new_head;\n// }\n\nint main(){\n  auto h1 = new node<string>(\"A\");\n  h1->next = new node<string>(\"B\");\n  h1->next->next = new node<string>(\"C\");\n  print_list<string>(h1);\n  auto new_head = reverse<string>(h1);\n  print_list(new_head);\n  auto h2 = new node<int>(1);\n  h2->next = new node<int>(2);\n  h2->next->next = new node<int>(3);\n  print_list<int>(h2);\n  auto new_head2 = reverse<int>(h2);\n  print_list<int>(new_head2);\n  return 0;\n}\n```\n","slug":"c-template-example","published":1,"updated":"2017-08-16T12:59:41.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdra000804tg9nbevehi","content":"<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></div><div class=\"line\">  T val;</div><div class=\"line\">  node* next;</div><div class=\"line\">  node(T v):val(v),next(<span class=\"literal\">NULL</span>)&#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_list</span><span class=\"params\">(node&lt;T&gt;* head)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span>(head)&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; head-&gt;val &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    head = head-&gt;next;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\">node&lt;T&gt;* reverse(node&lt;T&gt;* head)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!head || !(head-&gt;next)) <span class=\"keyword\">return</span> head;</div><div class=\"line\">  <span class=\"keyword\">auto</span> tail = head-&gt;next;</div><div class=\"line\">  head-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">  <span class=\"keyword\">auto</span> new_head = reverse(tail);</div><div class=\"line\">  tail-&gt;next = head;</div><div class=\"line\">  <span class=\"keyword\">return</span> new_head;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// template&lt;typename T&gt;</span></div><div class=\"line\"><span class=\"comment\">// node&lt;T&gt;* reverse(node&lt;T&gt;* head)&#123;</span></div><div class=\"line\"><span class=\"comment\">//   node&lt;T&gt;* new_head = NULL;</span></div><div class=\"line\"><span class=\"comment\">//   node&lt;T&gt;* next = NULL;</span></div><div class=\"line\"><span class=\"comment\">//   while(head)&#123;</span></div><div class=\"line\"><span class=\"comment\">//     next = head-&gt;next;</span></div><div class=\"line\"><span class=\"comment\">//     head-&gt;next = new_head;</span></div><div class=\"line\"><span class=\"comment\">//     new_head = head;</span></div><div class=\"line\"><span class=\"comment\">//     head = next;</span></div><div class=\"line\"><span class=\"comment\">//   &#125;</span></div><div class=\"line\"><span class=\"comment\">//   return new_head;</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">auto</span> h1 = <span class=\"keyword\">new</span> node&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">  h1-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">  h1-&gt;next-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"C\"</span>);</div><div class=\"line\">  print_list&lt;<span class=\"built_in\">string</span>&gt;(h1);</div><div class=\"line\">  <span class=\"keyword\">auto</span> new_head = reverse&lt;<span class=\"built_in\">string</span>&gt;(h1);</div><div class=\"line\">  print_list(new_head);</div><div class=\"line\">  <span class=\"keyword\">auto</span> h2 = <span class=\"keyword\">new</span> node&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>);</div><div class=\"line\">  h2-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">  h2-&gt;next-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">3</span>);</div><div class=\"line\">  print_list&lt;<span class=\"keyword\">int</span>&gt;(h2);</div><div class=\"line\">  <span class=\"keyword\">auto</span> new_head2 = reverse&lt;<span class=\"keyword\">int</span>&gt;(h2);</div><div class=\"line\">  print_list&lt;<span class=\"keyword\">int</span>&gt;(new_head2);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></div><div class=\"line\">  T val;</div><div class=\"line\">  node* next;</div><div class=\"line\">  node(T v):val(v),next(<span class=\"literal\">NULL</span>)&#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_list</span><span class=\"params\">(node&lt;T&gt;* head)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span>(head)&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; head-&gt;val &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    head = head-&gt;next;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\">node&lt;T&gt;* reverse(node&lt;T&gt;* head)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!head || !(head-&gt;next)) <span class=\"keyword\">return</span> head;</div><div class=\"line\">  <span class=\"keyword\">auto</span> tail = head-&gt;next;</div><div class=\"line\">  head-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">  <span class=\"keyword\">auto</span> new_head = reverse(tail);</div><div class=\"line\">  tail-&gt;next = head;</div><div class=\"line\">  <span class=\"keyword\">return</span> new_head;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// template&lt;typename T&gt;</span></div><div class=\"line\"><span class=\"comment\">// node&lt;T&gt;* reverse(node&lt;T&gt;* head)&#123;</span></div><div class=\"line\"><span class=\"comment\">//   node&lt;T&gt;* new_head = NULL;</span></div><div class=\"line\"><span class=\"comment\">//   node&lt;T&gt;* next = NULL;</span></div><div class=\"line\"><span class=\"comment\">//   while(head)&#123;</span></div><div class=\"line\"><span class=\"comment\">//     next = head-&gt;next;</span></div><div class=\"line\"><span class=\"comment\">//     head-&gt;next = new_head;</span></div><div class=\"line\"><span class=\"comment\">//     new_head = head;</span></div><div class=\"line\"><span class=\"comment\">//     head = next;</span></div><div class=\"line\"><span class=\"comment\">//   &#125;</span></div><div class=\"line\"><span class=\"comment\">//   return new_head;</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">auto</span> h1 = <span class=\"keyword\">new</span> node&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">  h1-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">  h1-&gt;next-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">\"C\"</span>);</div><div class=\"line\">  print_list&lt;<span class=\"built_in\">string</span>&gt;(h1);</div><div class=\"line\">  <span class=\"keyword\">auto</span> new_head = reverse&lt;<span class=\"built_in\">string</span>&gt;(h1);</div><div class=\"line\">  print_list(new_head);</div><div class=\"line\">  <span class=\"keyword\">auto</span> h2 = <span class=\"keyword\">new</span> node&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>);</div><div class=\"line\">  h2-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>);</div><div class=\"line\">  h2-&gt;next-&gt;next = <span class=\"keyword\">new</span> node&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">3</span>);</div><div class=\"line\">  print_list&lt;<span class=\"keyword\">int</span>&gt;(h2);</div><div class=\"line\">  <span class=\"keyword\">auto</span> new_head2 = reverse&lt;<span class=\"keyword\">int</span>&gt;(h2);</div><div class=\"line\">  print_list&lt;<span class=\"keyword\">int</span>&gt;(new_head2);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"rate checker","date":"2016-11-04T21:36:07.000Z","_content":"```py\nimport collections\nimport time\n\nclass RateChecker(object):\n  def __init__(self,q,n):\n    self.dq = collections.deque()\n    self.q = q\n    self.n = n\n\n# if in q seconds, has more than n requests, then true;\n# otherwise, false\n  def check(self):\n    t = time.time()\n    self.dq.append(t)\n    if len(self.dq) < self.n:\n      return False\n    last = self.dq.popleft()\n    return t-last < self.q\n\ndef main():\n  rc = RateChecker(1,3)\n  for i in range(3):\n    print rc.check()\n    time.sleep(0.1)\n  time.sleep(1.7)\n  for i in range(4):\n    print rc.check()\n    time.sleep(0.1)\n\n#False False True False False True True\n\nif __name__ == '__main__':\n  main()\n```\n","source":"_posts/rate-checker.md","raw":"---\ntitle: rate checker\ndate: 2016-11-04 17:36:07\ntags: [python, algorithm]\ncategories: [algorithms]\n---\n```py\nimport collections\nimport time\n\nclass RateChecker(object):\n  def __init__(self,q,n):\n    self.dq = collections.deque()\n    self.q = q\n    self.n = n\n\n# if in q seconds, has more than n requests, then true;\n# otherwise, false\n  def check(self):\n    t = time.time()\n    self.dq.append(t)\n    if len(self.dq) < self.n:\n      return False\n    last = self.dq.popleft()\n    return t-last < self.q\n\ndef main():\n  rc = RateChecker(1,3)\n  for i in range(3):\n    print rc.check()\n    time.sleep(0.1)\n  time.sleep(1.7)\n  for i in range(4):\n    print rc.check()\n    time.sleep(0.1)\n\n#False False True False False True True\n\nif __name__ == '__main__':\n  main()\n```\n","slug":"rate-checker","published":1,"updated":"2017-08-25T12:55:36.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdrc000904tg2cb31ext","content":"<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> collections</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RateChecker</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,q,n)</span>:</span></div><div class=\"line\">    self.dq = collections.deque()</div><div class=\"line\">    self.q = q</div><div class=\"line\">    self.n = n</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># if in q seconds, has more than n requests, then true;</span></div><div class=\"line\"><span class=\"comment\"># otherwise, false</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    t = time.time()</div><div class=\"line\">    self.dq.append(t)</div><div class=\"line\">    <span class=\"keyword\">if</span> len(self.dq) &lt; self.n:</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    last = self.dq.popleft()</div><div class=\"line\">    <span class=\"keyword\">return</span> t-last &lt; self.q</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  rc = RateChecker(<span class=\"number\">1</span>,<span class=\"number\">3</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> rc.check()</div><div class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</div><div class=\"line\">  time.sleep(<span class=\"number\">1.7</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> rc.check()</div><div class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#False False True False False True True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">  main()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> collections</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RateChecker</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,q,n)</span>:</span></div><div class=\"line\">    self.dq = collections.deque()</div><div class=\"line\">    self.q = q</div><div class=\"line\">    self.n = n</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># if in q seconds, has more than n requests, then true;</span></div><div class=\"line\"><span class=\"comment\"># otherwise, false</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    t = time.time()</div><div class=\"line\">    self.dq.append(t)</div><div class=\"line\">    <span class=\"keyword\">if</span> len(self.dq) &lt; self.n:</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    last = self.dq.popleft()</div><div class=\"line\">    <span class=\"keyword\">return</span> t-last &lt; self.q</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  rc = RateChecker(<span class=\"number\">1</span>,<span class=\"number\">3</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> rc.check()</div><div class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</div><div class=\"line\">  time.sleep(<span class=\"number\">1.7</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> rc.check()</div><div class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#False False True False False True True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">  main()</div></pre></td></tr></table></figure>\n"},{"title":"generate random number with given distribution","date":"2017-08-18T00:18:44.000Z","_content":"Given an discrete distribution array, use it to generate its index number with the corresponding probability. For example, `[0.4, 0.6]` will produce `0` with probability `0.4` and `1` with probability `0.6`.\n```python\nimport random\n\nclass makeSampler:\n  def __init__(self, arr):\n    self.dart = [arr[0]]\n    for i in range(1,len(arr)):\n      t = self.dart[-1]\n      self.dart.append(arr[i]+t)\n\n  def sample(self):\n    a = random.random() # generate a random number within [0.0, 1.0)\n    # the following using a trick similar to \"first bad version\"\n    l,r=0,len(self.dart)-1\n    while l<=r:\n      m=l+(r-l)/2\n      if a<=self.dart[m]:\n        r=m-1\n      else:\n        l=m+1\n    return l\n\nX = makeSampler([1])\nprint X.sample()\nX = makeSampler([0.5,0.5])\nprint X.sample()\nX = makeSampler([0.1,0.2,0.3,0.4])\nprint X.sample()\nprint X.sample()\nprint X.sample()\nprint X.sample()\n\n```\n","source":"_posts/generate-random-number-with-given-distribution.md","raw":"---\ntitle: generate random number with given distribution\ndate: 2017-08-17 20:18:44\ntags: [python, algorithm]\ncategories: algorithms\n---\nGiven an discrete distribution array, use it to generate its index number with the corresponding probability. For example, `[0.4, 0.6]` will produce `0` with probability `0.4` and `1` with probability `0.6`.\n```python\nimport random\n\nclass makeSampler:\n  def __init__(self, arr):\n    self.dart = [arr[0]]\n    for i in range(1,len(arr)):\n      t = self.dart[-1]\n      self.dart.append(arr[i]+t)\n\n  def sample(self):\n    a = random.random() # generate a random number within [0.0, 1.0)\n    # the following using a trick similar to \"first bad version\"\n    l,r=0,len(self.dart)-1\n    while l<=r:\n      m=l+(r-l)/2\n      if a<=self.dart[m]:\n        r=m-1\n      else:\n        l=m+1\n    return l\n\nX = makeSampler([1])\nprint X.sample()\nX = makeSampler([0.5,0.5])\nprint X.sample()\nX = makeSampler([0.1,0.2,0.3,0.4])\nprint X.sample()\nprint X.sample()\nprint X.sample()\nprint X.sample()\n\n```\n","slug":"generate-random-number-with-given-distribution","published":1,"updated":"2017-08-25T12:55:36.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdre000c04tgyeu39usi","content":"<p>Given an discrete distribution array, use it to generate its index number with the corresponding probability. For example, <code>[0.4, 0.6]</code> will produce <code>0</code> with probability <code>0.4</code> and <code>1</code> with probability <code>0.6</code>.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">makeSampler</span>:</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, arr)</span>:</span></div><div class=\"line\">    self.dart = [arr[<span class=\"number\">0</span>]]</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(arr)):</div><div class=\"line\">      t = self.dart[<span class=\"number\">-1</span>]</div><div class=\"line\">      self.dart.append(arr[i]+t)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sample</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    a = random.random() <span class=\"comment\"># generate a random number within [0.0, 1.0)</span></div><div class=\"line\">    <span class=\"comment\"># the following using a trick similar to \"first bad version\"</span></div><div class=\"line\">    l,r=<span class=\"number\">0</span>,len(self.dart)<span class=\"number\">-1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> l&lt;=r:</div><div class=\"line\">      m=l+(r-l)/<span class=\"number\">2</span></div><div class=\"line\">      <span class=\"keyword\">if</span> a&lt;=self.dart[m]:</div><div class=\"line\">        r=m<span class=\"number\">-1</span></div><div class=\"line\">      <span class=\"keyword\">else</span>:</div><div class=\"line\">        l=m+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> l</div><div class=\"line\"></div><div class=\"line\">X = makeSampler([<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\">X = makeSampler([<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\">X = makeSampler([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Given an discrete distribution array, use it to generate its index number with the corresponding probability. For example, <code>[0.4, 0.6]</code> will produce <code>0</code> with probability <code>0.4</code> and <code>1</code> with probability <code>0.6</code>.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">makeSampler</span>:</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, arr)</span>:</span></div><div class=\"line\">    self.dart = [arr[<span class=\"number\">0</span>]]</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(arr)):</div><div class=\"line\">      t = self.dart[<span class=\"number\">-1</span>]</div><div class=\"line\">      self.dart.append(arr[i]+t)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sample</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    a = random.random() <span class=\"comment\"># generate a random number within [0.0, 1.0)</span></div><div class=\"line\">    <span class=\"comment\"># the following using a trick similar to \"first bad version\"</span></div><div class=\"line\">    l,r=<span class=\"number\">0</span>,len(self.dart)<span class=\"number\">-1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> l&lt;=r:</div><div class=\"line\">      m=l+(r-l)/<span class=\"number\">2</span></div><div class=\"line\">      <span class=\"keyword\">if</span> a&lt;=self.dart[m]:</div><div class=\"line\">        r=m<span class=\"number\">-1</span></div><div class=\"line\">      <span class=\"keyword\">else</span>:</div><div class=\"line\">        l=m+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> l</div><div class=\"line\"></div><div class=\"line\">X = makeSampler([<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\">X = makeSampler([<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\">X = makeSampler([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div><div class=\"line\"><span class=\"keyword\">print</span> X.sample()</div></pre></td></tr></table></figure></p>\n"},{"title":"max points within angle","date":"2017-08-19T21:23:45.000Z","_content":"Given a 30 degree angle on the origin point, find the maximum points within the angle area.\n```python\nimport math\n# p is an array of tuples\ndef maxPointsWithIn30Degree(p):\n  l = len(p)\n  res = 0\n  threshold = math.cos(30*math.pi/180)\n  for i in range(l):\n    posi_count = 1\n    neg_count = 1\n    for j in range(l):\n      if j == i: continue\n      if cos(p[i], p[j]) > threshold:\n        # check p[j] is on the positive side or negative side\n        if check(p[i], p[j]) >= 0: posi_count += 1\n        if check(p[i], p[j]) <= 0: neg_count += 1\n    res = max(res, max(posi_count, neg_count))\n  return res\n\ndef checkSide(a, b):\n  return a[0]*b[0] - a[1]*b[1]\n\ndef cos(a, b):\n  return (a(0)*b(0) + a(1)*b(1))/(\n    math.sqrt(a(0)**2 + a(1)**2)*math.sqrt(b(0)**2 + b(1)**2))\n```\n","source":"_posts/max-points-within-angle.md","raw":"---\ntitle: max points within angle\ndate: 2017-08-19 17:23:45\ntags: [python, algorithm]\ncategories: [algorithms]\n---\nGiven a 30 degree angle on the origin point, find the maximum points within the angle area.\n```python\nimport math\n# p is an array of tuples\ndef maxPointsWithIn30Degree(p):\n  l = len(p)\n  res = 0\n  threshold = math.cos(30*math.pi/180)\n  for i in range(l):\n    posi_count = 1\n    neg_count = 1\n    for j in range(l):\n      if j == i: continue\n      if cos(p[i], p[j]) > threshold:\n        # check p[j] is on the positive side or negative side\n        if check(p[i], p[j]) >= 0: posi_count += 1\n        if check(p[i], p[j]) <= 0: neg_count += 1\n    res = max(res, max(posi_count, neg_count))\n  return res\n\ndef checkSide(a, b):\n  return a[0]*b[0] - a[1]*b[1]\n\ndef cos(a, b):\n  return (a(0)*b(0) + a(1)*b(1))/(\n    math.sqrt(a(0)**2 + a(1)**2)*math.sqrt(b(0)**2 + b(1)**2))\n```\n","slug":"max-points-within-angle","published":1,"updated":"2017-08-25T12:55:36.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdrf000e04tgawskdtyf","content":"<p>Given a 30 degree angle on the origin point, find the maximum points within the angle area.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"><span class=\"comment\"># p is an array of tuples</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxPointsWithIn30Degree</span><span class=\"params\">(p)</span>:</span></div><div class=\"line\">  l = len(p)</div><div class=\"line\">  res = <span class=\"number\">0</span></div><div class=\"line\">  threshold = math.cos(<span class=\"number\">30</span>*math.pi/<span class=\"number\">180</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(l):</div><div class=\"line\">    posi_count = <span class=\"number\">1</span></div><div class=\"line\">    neg_count = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(l):</div><div class=\"line\">      <span class=\"keyword\">if</span> j == i: <span class=\"keyword\">continue</span></div><div class=\"line\">      <span class=\"keyword\">if</span> cos(p[i], p[j]) &gt; threshold:</div><div class=\"line\">        <span class=\"comment\"># check p[j] is on the positive side or negative side</span></div><div class=\"line\">        <span class=\"keyword\">if</span> check(p[i], p[j]) &gt;= <span class=\"number\">0</span>: posi_count += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> check(p[i], p[j]) &lt;= <span class=\"number\">0</span>: neg_count += <span class=\"number\">1</span></div><div class=\"line\">    res = max(res, max(posi_count, neg_count))</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkSide</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">return</span> a[<span class=\"number\">0</span>]*b[<span class=\"number\">0</span>] - a[<span class=\"number\">1</span>]*b[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cos</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">return</span> (a(<span class=\"number\">0</span>)*b(<span class=\"number\">0</span>) + a(<span class=\"number\">1</span>)*b(<span class=\"number\">1</span>))/(</div><div class=\"line\">    math.sqrt(a(<span class=\"number\">0</span>)**<span class=\"number\">2</span> + a(<span class=\"number\">1</span>)**<span class=\"number\">2</span>)*math.sqrt(b(<span class=\"number\">0</span>)**<span class=\"number\">2</span> + b(<span class=\"number\">1</span>)**<span class=\"number\">2</span>))</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Given a 30 degree angle on the origin point, find the maximum points within the angle area.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"><span class=\"comment\"># p is an array of tuples</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxPointsWithIn30Degree</span><span class=\"params\">(p)</span>:</span></div><div class=\"line\">  l = len(p)</div><div class=\"line\">  res = <span class=\"number\">0</span></div><div class=\"line\">  threshold = math.cos(<span class=\"number\">30</span>*math.pi/<span class=\"number\">180</span>)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(l):</div><div class=\"line\">    posi_count = <span class=\"number\">1</span></div><div class=\"line\">    neg_count = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(l):</div><div class=\"line\">      <span class=\"keyword\">if</span> j == i: <span class=\"keyword\">continue</span></div><div class=\"line\">      <span class=\"keyword\">if</span> cos(p[i], p[j]) &gt; threshold:</div><div class=\"line\">        <span class=\"comment\"># check p[j] is on the positive side or negative side</span></div><div class=\"line\">        <span class=\"keyword\">if</span> check(p[i], p[j]) &gt;= <span class=\"number\">0</span>: posi_count += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> check(p[i], p[j]) &lt;= <span class=\"number\">0</span>: neg_count += <span class=\"number\">1</span></div><div class=\"line\">    res = max(res, max(posi_count, neg_count))</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkSide</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">return</span> a[<span class=\"number\">0</span>]*b[<span class=\"number\">0</span>] - a[<span class=\"number\">1</span>]*b[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cos</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">return</span> (a(<span class=\"number\">0</span>)*b(<span class=\"number\">0</span>) + a(<span class=\"number\">1</span>)*b(<span class=\"number\">1</span>))/(</div><div class=\"line\">    math.sqrt(a(<span class=\"number\">0</span>)**<span class=\"number\">2</span> + a(<span class=\"number\">1</span>)**<span class=\"number\">2</span>)*math.sqrt(b(<span class=\"number\">0</span>)**<span class=\"number\">2</span> + b(<span class=\"number\">1</span>)**<span class=\"number\">2</span>))</div></pre></td></tr></table></figure></p>\n"},{"title":"thread safe stack","date":"2017-01-01T05:00:00.000Z","_content":"<!-- more -->\n```cpp\ntemplate<typename T>\nclass my_stack{\npublic:\n  void push(const T& item){\n    lock_guard<mutex> g(_m);\n    _s.push(item);\n  }\n  void pop(){\n    lock_guard<mutex> g(_m);\n    _s.pop();\n  }\n  T top() {\n    lock_guard<mutex> g(_m);\n    return _s.top();\n  }\n  bool empty() {\n    lock_guard<mutex> g(_m);\n    return _s.empty();\n  }\nprivate:\n  stack<T> _s;\n  mutex _m;\n};\n```\n","source":"_posts/thread-safe-stack.md","raw":"---\ntitle: thread safe stack\ndate: 2017-01-01\ntags: [c++]\ncategories: data structure\n---\n<!-- more -->\n```cpp\ntemplate<typename T>\nclass my_stack{\npublic:\n  void push(const T& item){\n    lock_guard<mutex> g(_m);\n    _s.push(item);\n  }\n  void pop(){\n    lock_guard<mutex> g(_m);\n    _s.pop();\n  }\n  T top() {\n    lock_guard<mutex> g(_m);\n    return _s.top();\n  }\n  bool empty() {\n    lock_guard<mutex> g(_m);\n    return _s.empty();\n  }\nprivate:\n  stack<T> _s;\n  mutex _m;\n};\n```\n","slug":"thread-safe-stack","published":1,"updated":"2017-08-16T12:59:41.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdrh000j04tgwhtc9cv4","content":"<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">my_stack</span>&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; item)</span></span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    _s.push(item);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    _s.pop();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    <span class=\"keyword\">return</span> _s.top();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    <span class=\"keyword\">return</span> _s.empty();</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">  <span class=\"built_in\">stack</span>&lt;T&gt; _s;</div><div class=\"line\">  mutex _m;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">my_stack</span>&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; item)</span></span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    _s.push(item);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    _s.pop();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    <span class=\"keyword\">return</span> _s.top();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    lock_guard&lt;mutex&gt; g(_m);</div><div class=\"line\">    <span class=\"keyword\">return</span> _s.empty();</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">  <span class=\"built_in\">stack</span>&lt;T&gt; _s;</div><div class=\"line\">  mutex _m;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"sentence break","date":"2017-08-25T12:56:07.000Z","_content":"Given a long string, break it into a rray of strings. Each string length should be no larger than the given limit.\n```python\ndef break_down(string, char_limit):\n  res = []\n  arr = string.split()\n  pre = ''\n  i = 0\n  while i < len(arr):\n    if len(pre) == 0:\n      pre = arr[i]\n      i += 1\n    elif len(pre) > char_limit:\n      chop_arr = chopWord(pre, char_limit)\n      if len(chop_arr[-1]) == char_limit or len(chop_arr[-1]) + 1 == char_limit:\n        res += chop_arr\n        pre = ''\n      else:\n        res += chop_arr[:-1]\n        pre = chop_arr[-1]\n    elif len(pre) == char_limit or len(pre) + 1 == char_limit:\n      res.append(pre)\n      pre = ''\n    else:\n      if len(pre) + 1 + len(arr[i]) <= char_limit:\n        pre = pre + ' ' + arr[i]\n        i += 1\n      else:\n        res.append(pre)\n        pre = ''\n        # if len(arr[i]) <= char_limit:\n        #     res.append(pre)\n        #     pre = ''\n        # else:\n        #     pre = pre + ' ' + arr[i]\n        #     i += 1\n  if len(pre) > 0:\n    res += chopWord(pre, char_limit)\n  return res\n\ndef chopWord(word, limit):\n  res = []\n  def helper(word, limit, arr):\n    if len(word) <= limit:\n      arr.append(word)\n      return\n    else:\n      arr.append(word[:limit])\n      helper(word[limit:], limit, arr)\n  helper(word, limit, res)\n  return res\n\ns = \"Hey Ian, your Uber is arriving now!\"\nres = break_down(s, 3)\nfor i in res:\n  print (i)\nres = break_down(s, 20)\nfor i in res:\n  print(i)\ns = \"Hey Ian Smithington-Mephisto, your Uber is on the way!\"\nres = break_down(s, 10)\nfor i in res:\n  print(i)\n```\n","source":"_posts/sentence-break.md","raw":"---\ntitle: sentence break\ndate: 2017-08-25 08:56:07\ntags: [python, algorithm]\ncategories: algorithms\n---\nGiven a long string, break it into a rray of strings. Each string length should be no larger than the given limit.\n```python\ndef break_down(string, char_limit):\n  res = []\n  arr = string.split()\n  pre = ''\n  i = 0\n  while i < len(arr):\n    if len(pre) == 0:\n      pre = arr[i]\n      i += 1\n    elif len(pre) > char_limit:\n      chop_arr = chopWord(pre, char_limit)\n      if len(chop_arr[-1]) == char_limit or len(chop_arr[-1]) + 1 == char_limit:\n        res += chop_arr\n        pre = ''\n      else:\n        res += chop_arr[:-1]\n        pre = chop_arr[-1]\n    elif len(pre) == char_limit or len(pre) + 1 == char_limit:\n      res.append(pre)\n      pre = ''\n    else:\n      if len(pre) + 1 + len(arr[i]) <= char_limit:\n        pre = pre + ' ' + arr[i]\n        i += 1\n      else:\n        res.append(pre)\n        pre = ''\n        # if len(arr[i]) <= char_limit:\n        #     res.append(pre)\n        #     pre = ''\n        # else:\n        #     pre = pre + ' ' + arr[i]\n        #     i += 1\n  if len(pre) > 0:\n    res += chopWord(pre, char_limit)\n  return res\n\ndef chopWord(word, limit):\n  res = []\n  def helper(word, limit, arr):\n    if len(word) <= limit:\n      arr.append(word)\n      return\n    else:\n      arr.append(word[:limit])\n      helper(word[limit:], limit, arr)\n  helper(word, limit, res)\n  return res\n\ns = \"Hey Ian, your Uber is arriving now!\"\nres = break_down(s, 3)\nfor i in res:\n  print (i)\nres = break_down(s, 20)\nfor i in res:\n  print(i)\ns = \"Hey Ian Smithington-Mephisto, your Uber is on the way!\"\nres = break_down(s, 10)\nfor i in res:\n  print(i)\n```\n","slug":"sentence-break","published":1,"updated":"2017-08-25T13:01:36.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdrk000m04tgv62vu4c2","content":"<p>Given a long string, break it into a rray of strings. Each string length should be no larger than the given limit.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">break_down</span><span class=\"params\">(string, char_limit)</span>:</span></div><div class=\"line\">  res = []</div><div class=\"line\">  arr = string.split()</div><div class=\"line\">  pre = <span class=\"string\">''</span></div><div class=\"line\">  i = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">while</span> i &lt; len(arr):</div><div class=\"line\">    <span class=\"keyword\">if</span> len(pre) == <span class=\"number\">0</span>:</div><div class=\"line\">      pre = arr[i]</div><div class=\"line\">      i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> len(pre) &gt; char_limit:</div><div class=\"line\">      chop_arr = chopWord(pre, char_limit)</div><div class=\"line\">      <span class=\"keyword\">if</span> len(chop_arr[<span class=\"number\">-1</span>]) == char_limit <span class=\"keyword\">or</span> len(chop_arr[<span class=\"number\">-1</span>]) + <span class=\"number\">1</span> == char_limit:</div><div class=\"line\">        res += chop_arr</div><div class=\"line\">        pre = <span class=\"string\">''</span></div><div class=\"line\">      <span class=\"keyword\">else</span>:</div><div class=\"line\">        res += chop_arr[:<span class=\"number\">-1</span>]</div><div class=\"line\">        pre = chop_arr[<span class=\"number\">-1</span>]</div><div class=\"line\">    <span class=\"keyword\">elif</span> len(pre) == char_limit <span class=\"keyword\">or</span> len(pre) + <span class=\"number\">1</span> == char_limit:</div><div class=\"line\">      res.append(pre)</div><div class=\"line\">      pre = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span> len(pre) + <span class=\"number\">1</span> + len(arr[i]) &lt;= char_limit:</div><div class=\"line\">        pre = pre + <span class=\"string\">' '</span> + arr[i]</div><div class=\"line\">        i += <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">else</span>:</div><div class=\"line\">        res.append(pre)</div><div class=\"line\">        pre = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"comment\"># if len(arr[i]) &lt;= char_limit:</span></div><div class=\"line\">        <span class=\"comment\">#     res.append(pre)</span></div><div class=\"line\">        <span class=\"comment\">#     pre = ''</span></div><div class=\"line\">        <span class=\"comment\"># else:</span></div><div class=\"line\">        <span class=\"comment\">#     pre = pre + ' ' + arr[i]</span></div><div class=\"line\">        <span class=\"comment\">#     i += 1</span></div><div class=\"line\">  <span class=\"keyword\">if</span> len(pre) &gt; <span class=\"number\">0</span>:</div><div class=\"line\">    res += chopWord(pre, char_limit)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chopWord</span><span class=\"params\">(word, limit)</span>:</span></div><div class=\"line\">  res = []</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(word, limit, arr)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(word) &lt;= limit:</div><div class=\"line\">      arr.append(word)</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">      arr.append(word[:limit])</div><div class=\"line\">      helper(word[limit:], limit, arr)</div><div class=\"line\">  helper(word, limit, res)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\">s = <span class=\"string\">\"Hey Ian, your Uber is arriving now!\"</span></div><div class=\"line\">res = break_down(s, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">  <span class=\"keyword\">print</span> (i)</div><div class=\"line\">res = break_down(s, <span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">  print(i)</div><div class=\"line\">s = <span class=\"string\">\"Hey Ian Smithington-Mephisto, your Uber is on the way!\"</span></div><div class=\"line\">res = break_down(s, <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">  print(i)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Given a long string, break it into a rray of strings. Each string length should be no larger than the given limit.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">break_down</span><span class=\"params\">(string, char_limit)</span>:</span></div><div class=\"line\">  res = []</div><div class=\"line\">  arr = string.split()</div><div class=\"line\">  pre = <span class=\"string\">''</span></div><div class=\"line\">  i = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">while</span> i &lt; len(arr):</div><div class=\"line\">    <span class=\"keyword\">if</span> len(pre) == <span class=\"number\">0</span>:</div><div class=\"line\">      pre = arr[i]</div><div class=\"line\">      i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> len(pre) &gt; char_limit:</div><div class=\"line\">      chop_arr = chopWord(pre, char_limit)</div><div class=\"line\">      <span class=\"keyword\">if</span> len(chop_arr[<span class=\"number\">-1</span>]) == char_limit <span class=\"keyword\">or</span> len(chop_arr[<span class=\"number\">-1</span>]) + <span class=\"number\">1</span> == char_limit:</div><div class=\"line\">        res += chop_arr</div><div class=\"line\">        pre = <span class=\"string\">''</span></div><div class=\"line\">      <span class=\"keyword\">else</span>:</div><div class=\"line\">        res += chop_arr[:<span class=\"number\">-1</span>]</div><div class=\"line\">        pre = chop_arr[<span class=\"number\">-1</span>]</div><div class=\"line\">    <span class=\"keyword\">elif</span> len(pre) == char_limit <span class=\"keyword\">or</span> len(pre) + <span class=\"number\">1</span> == char_limit:</div><div class=\"line\">      res.append(pre)</div><div class=\"line\">      pre = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">      <span class=\"keyword\">if</span> len(pre) + <span class=\"number\">1</span> + len(arr[i]) &lt;= char_limit:</div><div class=\"line\">        pre = pre + <span class=\"string\">' '</span> + arr[i]</div><div class=\"line\">        i += <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">else</span>:</div><div class=\"line\">        res.append(pre)</div><div class=\"line\">        pre = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"comment\"># if len(arr[i]) &lt;= char_limit:</span></div><div class=\"line\">        <span class=\"comment\">#     res.append(pre)</span></div><div class=\"line\">        <span class=\"comment\">#     pre = ''</span></div><div class=\"line\">        <span class=\"comment\"># else:</span></div><div class=\"line\">        <span class=\"comment\">#     pre = pre + ' ' + arr[i]</span></div><div class=\"line\">        <span class=\"comment\">#     i += 1</span></div><div class=\"line\">  <span class=\"keyword\">if</span> len(pre) &gt; <span class=\"number\">0</span>:</div><div class=\"line\">    res += chopWord(pre, char_limit)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chopWord</span><span class=\"params\">(word, limit)</span>:</span></div><div class=\"line\">  res = []</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(word, limit, arr)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(word) &lt;= limit:</div><div class=\"line\">      arr.append(word)</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">      arr.append(word[:limit])</div><div class=\"line\">      helper(word[limit:], limit, arr)</div><div class=\"line\">  helper(word, limit, res)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\">s = <span class=\"string\">\"Hey Ian, your Uber is arriving now!\"</span></div><div class=\"line\">res = break_down(s, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">  <span class=\"keyword\">print</span> (i)</div><div class=\"line\">res = break_down(s, <span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">  print(i)</div><div class=\"line\">s = <span class=\"string\">\"Hey Ian Smithington-Mephisto, your Uber is on the way!\"</span></div><div class=\"line\">res = break_down(s, <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">  print(i)</div></pre></td></tr></table></figure></p>\n"},{"title":"reservoir sample","date":"2016-10-31T04:00:00.000Z","_content":"<!-- more -->\n[Algorithm R](https://en.wikipedia.org/wiki/Reservoir_sampling)\n```py\nimport random\n\ndef reservoir_sample(arr, k):\n  res = []\n  t = []\n  for i in range(k):\n    t.append(arr[i]);\n  res.append(t)\n  for j in range(k,len(arr)):\n    t = list(t)\n    i = random.randint(0,j)\n    if i<k:\n      t[i]=arr[j]\n    res.append(t)\n  return res\narr = [1,2,3,4,5,6,7]\nprint(reservoir_sample(arr, 2))\n```\n","source":"_posts/reservoir-sample.md","raw":"---\ntitle: reservoir sample\ndate: 2016-10-31\ntags: [python, algorithm]\ncategories: algorithms\n---\n<!-- more -->\n[Algorithm R](https://en.wikipedia.org/wiki/Reservoir_sampling)\n```py\nimport random\n\ndef reservoir_sample(arr, k):\n  res = []\n  t = []\n  for i in range(k):\n    t.append(arr[i]);\n  res.append(t)\n  for j in range(k,len(arr)):\n    t = list(t)\n    i = random.randint(0,j)\n    if i<k:\n      t[i]=arr[j]\n    res.append(t)\n  return res\narr = [1,2,3,4,5,6,7]\nprint(reservoir_sample(arr, 2))\n```\n","slug":"reservoir-sample","published":1,"updated":"2017-08-16T12:59:41.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6rvzdrn000r04tgtrxtgwrg","content":"<a id=\"more\"></a>\n<p><a href=\"https://en.wikipedia.org/wiki/Reservoir_sampling\" target=\"_blank\" rel=\"external\">Algorithm R</a><br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reservoir_sample</span><span class=\"params\">(arr, k)</span>:</span></div><div class=\"line\">  res = []</div><div class=\"line\">  t = []</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</div><div class=\"line\">    t.append(arr[i]);</div><div class=\"line\">  res.append(t)</div><div class=\"line\">  <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k,len(arr)):</div><div class=\"line\">    t = list(t)</div><div class=\"line\">    i = random.randint(<span class=\"number\">0</span>,j)</div><div class=\"line\">    <span class=\"keyword\">if</span> i&lt;k:</div><div class=\"line\">      t[i]=arr[j]</div><div class=\"line\">    res.append(t)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</div><div class=\"line\">print(reservoir_sample(arr, <span class=\"number\">2</span>))</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://en.wikipedia.org/wiki/Reservoir_sampling\" target=\"_blank\" rel=\"external\">Algorithm R</a><br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reservoir_sample</span><span class=\"params\">(arr, k)</span>:</span></div><div class=\"line\">  res = []</div><div class=\"line\">  t = []</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</div><div class=\"line\">    t.append(arr[i]);</div><div class=\"line\">  res.append(t)</div><div class=\"line\">  <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k,len(arr)):</div><div class=\"line\">    t = list(t)</div><div class=\"line\">    i = random.randint(<span class=\"number\">0</span>,j)</div><div class=\"line\">    <span class=\"keyword\">if</span> i&lt;k:</div><div class=\"line\">      t[i]=arr[j]</div><div class=\"line\">    res.append(t)</div><div class=\"line\">  <span class=\"keyword\">return</span> res</div><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</div><div class=\"line\">print(reservoir_sample(arr, <span class=\"number\">2</span>))</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6rvzdqp000004tgckdv3ci2","category_id":"cj6rvzdr5000404tgt8igwfjt","_id":"cj6rvzdrf000d04tgl11se2m2"},{"post_id":"cj6rvzdrc000904tg2cb31ext","category_id":"cj6rvzdr5000404tgt8igwfjt","_id":"cj6rvzdrg000i04tghfre8sit"},{"post_id":"cj6rvzdre000c04tgyeu39usi","category_id":"cj6rvzdr5000404tgt8igwfjt","_id":"cj6rvzdrj000l04tgjg5asbna"},{"post_id":"cj6rvzdr0000204tgf6po3vyy","category_id":"cj6rvzdrd000a04tgetldb8qm","_id":"cj6rvzdrm000q04tgowrj8ly6"},{"post_id":"cj6rvzdrf000e04tgawskdtyf","category_id":"cj6rvzdr5000404tgt8igwfjt","_id":"cj6rvzdrp000t04tg31q3n2on"},{"post_id":"cj6rvzdrh000j04tgwhtc9cv4","category_id":"cj6rvzdrg000f04tguupb9zrf","_id":"cj6rvzdrq000w04tgrbuxc9fe"},{"post_id":"cj6rvzdr8000604tgdoittmd6","category_id":"cj6rvzdrg000f04tguupb9zrf","_id":"cj6rvzdrq000y04tgvhpaa2yb"},{"post_id":"cj6rvzdrk000m04tgv62vu4c2","category_id":"cj6rvzdr5000404tgt8igwfjt","_id":"cj6rvzdrr001104tgtfcyfego"},{"post_id":"cj6rvzdrn000r04tgtrxtgwrg","category_id":"cj6rvzdr5000404tgt8igwfjt","_id":"cj6rvzdrr001304tgbsbir5nz"},{"post_id":"cj6rvzdra000804tg9nbevehi","category_id":"cj6rvzdrd000a04tgetldb8qm","_id":"cj6rvzdrs001504tgv57h344x"}],"PostTag":[{"post_id":"cj6rvzdre000c04tgyeu39usi","tag_id":"cj6rvzdr7000504tgmg2vdgwo","_id":"cj6rvzdrg000h04tgfk87jy6y"},{"post_id":"cj6rvzdre000c04tgyeu39usi","tag_id":"cj6rvzdrd000b04tgjttgb5is","_id":"cj6rvzdrj000k04tgheysjree"},{"post_id":"cj6rvzdqp000004tgckdv3ci2","tag_id":"cj6rvzdr7000504tgmg2vdgwo","_id":"cj6rvzdrm000p04tguvzkf3r5"},{"post_id":"cj6rvzdqp000004tgckdv3ci2","tag_id":"cj6rvzdrd000b04tgjttgb5is","_id":"cj6rvzdrp000s04tgi28ihh6n"},{"post_id":"cj6rvzdrf000e04tgawskdtyf","tag_id":"cj6rvzdr7000504tgmg2vdgwo","_id":"cj6rvzdrq000v04tgbjpzpn3s"},{"post_id":"cj6rvzdrf000e04tgawskdtyf","tag_id":"cj6rvzdrd000b04tgjttgb5is","_id":"cj6rvzdrq000x04tge0p7qat4"},{"post_id":"cj6rvzdrh000j04tgwhtc9cv4","tag_id":"cj6rvzdrg000g04tgn7yr37xo","_id":"cj6rvzdrr001004tgr7r06si6"},{"post_id":"cj6rvzdr0000204tgf6po3vyy","tag_id":"cj6rvzdrg000g04tgn7yr37xo","_id":"cj6rvzdrr001204tgot6k50wi"},{"post_id":"cj6rvzdrk000m04tgv62vu4c2","tag_id":"cj6rvzdr7000504tgmg2vdgwo","_id":"cj6rvzdrs001404tg9egjlbx0"},{"post_id":"cj6rvzdrk000m04tgv62vu4c2","tag_id":"cj6rvzdrd000b04tgjttgb5is","_id":"cj6rvzdrs001604tgt77e74rv"},{"post_id":"cj6rvzdrn000r04tgtrxtgwrg","tag_id":"cj6rvzdr7000504tgmg2vdgwo","_id":"cj6rvzdrt001704tghtrv9tgt"},{"post_id":"cj6rvzdrn000r04tgtrxtgwrg","tag_id":"cj6rvzdrd000b04tgjttgb5is","_id":"cj6rvzdrt001804tgevbugggf"},{"post_id":"cj6rvzdr8000604tgdoittmd6","tag_id":"cj6rvzdrg000g04tgn7yr37xo","_id":"cj6rvzdrv001904tg11gj94z7"},{"post_id":"cj6rvzdra000804tg9nbevehi","tag_id":"cj6rvzdrg000g04tgn7yr37xo","_id":"cj6rvzdrv001a04tglmivabks"},{"post_id":"cj6rvzdrc000904tg2cb31ext","tag_id":"cj6rvzdr7000504tgmg2vdgwo","_id":"cj6rvzdrw001b04tg0f976ylb"},{"post_id":"cj6rvzdrc000904tg2cb31ext","tag_id":"cj6rvzdrd000b04tgjttgb5is","_id":"cj6rvzdrx001c04tgva5bshi5"}],"Tag":[{"name":"python","_id":"cj6rvzdr7000504tgmg2vdgwo"},{"name":"algorithm","_id":"cj6rvzdrd000b04tgjttgb5is"},{"name":"c++","_id":"cj6rvzdrg000g04tgn7yr37xo"}]}}